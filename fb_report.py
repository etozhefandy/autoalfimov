import asyncio
import re
from datetime import datetime, timedelta, time
from pytz import timezone
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.api import FacebookAdsApi
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import json
from math import ceil

ACCESS_TOKEN = "EAASZCrBwhoH0BO7xBXr2h2sGTzvWzUyViJjnrXIvmI5w3uRQOszdntxDiFYxXH4hrKTmZBaPKtuthKuNx3rexRev5zAkby2XbrM5UmwzRGz8a2Q4WBDKp3d1ZCZAAhZCeWFBObQayL4XPwrOFQUtuPcGP5XVYubaXjZCsNT467yKBg90O71oVPZCbI0FrWcZAZC4GtgZDZD"
APP_ID = "1336645834088573"
APP_SECRET = "01bf23c5f726c59da318daa82dd0e9dc"
FacebookAdsApi.init(APP_ID, APP_SECRET, ACCESS_TOKEN)

AD_ACCOUNTS = [
    "act_1415004142524014",  # –ñ–° –ê—Å—Ç–∞–Ω–∞
    "act_719853653795521",   # –ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞
    "act_1206987573792913",  # –ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä
    "act_1108417930211002",  # –ñ–° –ê–∫—Ç–∞—É
    "act_2342025859327675",  # –ñ–° –ê—Ç—ã—Ä–∞—É
    "act_844229314275496",   # –ñ–° –ê–∫—Ç–æ–±–µ
    "act_1333550570916716",  # –ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)
    "act_195526110289107",   # –ñ–° –¢–∞—Ä–∞–∑
    "act_2145160982589338",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç
    "act_1042955424178074",  # –∫–µ–Ω—Å–µ 1
    "act_4030694587199998",  # –∫–µ–Ω—Å–µ 2
    "act_508239018969999",   # —Ñ–∏—Ç–Ω–µ—Å –ø–æ–∏–Ω—Ç
    "act_1357165995492721",  # –ê—Ä–∏—è —Å—Ç–µ–ø–∏
    "act_798205335840576"     # –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
]

MESSAGING_ACCOUNTS = {
    "act_1415004142524014",
    "act_1108417930211002",
    "act_2342025859327675",
    "act_1333550570916716",
    "act_844229314275496",
    "act_1206987573792913",
    "act_195526110289107",
    "act_2145160982589338",
    "act_719853653795521"
}

LEAD_FORM_ACCOUNTS = {
    "act_1042955424178074",
    "act_4030694587199998",
    "act_798205335840576"
}

TELEGRAM_TOKEN = "8033028841:AAGud3hSZdR8KQiOSaAcwfbkv8P0p-P3Dt4"
CHAT_ID = "-1002679045097"
account_statuses = {}

FORECAST_CACHE_FILE = "forecast_cache.json"

ACCOUNT_NAMES = {
    "act_1415004142524014": "–ñ–° –ê—Å—Ç–∞–Ω–∞",
    "act_719853653795521": "–ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
    "act_1206987573792913": "–ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä",
    "act_1108417930211002": "–ñ–° –ê–∫—Ç–∞—É",
    "act_2342025859327675": "–ñ–° –ê—Ç—ã—Ä–∞—É",
    "act_844229314275496": "–ñ–° –ê–∫—Ç–æ–±–µ",
    "act_1333550570916716": "–ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)",
    "act_195526110289107": "–ñ–° –¢–∞—Ä–∞–∑",
    "act_2145160982589338": "–ñ–° –®—ã–º–∫–µ–Ω—Ç",
    "act_1042955424178074": "–∫–µ–Ω—Å–µ 1",
    "act_4030694587199998": "–∫–µ–Ω—Å–µ 2",
    "act_508239018969999": "–§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç",
    "act_1357165995492721": "–ê—Ä–∏—è –°—Ç–µ–ø–∏",
    "act_798205335840576": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
}

def is_account_active(account_id):
    try:
        status = AdAccount(account_id).api_get(fields=['account_status'])['account_status']
        return "üü¢" if status == 1 else "üî¥"
    except:
        return "üî¥"

def format_number(num):
    return f"{int(float(num)):,}".replace(",", " ")

def load_forecast_cache():
    try:
        with open(FORECAST_CACHE_FILE, "r") as f:
            return json.load(f)
    except:
        return {}

def save_forecast_cache(cache):
    with open(FORECAST_CACHE_FILE, "w") as f:
        json.dump(cache, f)

def get_facebook_data(account_id, date_preset, date_label=''):
    ... # –°–æ–∫—Ä–∞—Ç–∏–º –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ

async def send_report(context, chat_id, period, date_label=''):
    ... # –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ

async def check_billing(context: ContextTypes.DEFAULT_TYPE):
    ... # –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    ... # –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ

async def check_billing_forecast(context: ContextTypes.DEFAULT_TYPE):
    cache = load_forecast_cache()
    today = datetime.now(timezone("Asia/Almaty")).date()

    for acc_id in AD_ACCOUNTS:
        try:
            account = AdAccount(acc_id)
            data = account.api_get(fields=["name", "spend_cap", "amount_spent"])
            spend_cap = float(data.get("spend_cap", 0)) / 100
            amount_spent = float(data.get("amount_spent", 0)) / 100
            available_to_spend = spend_cap - amount_spent

            campaigns = account.get_campaigns(fields=["name", "effective_status", "daily_budget"])
            daily_budget = sum(
                int(c.get("daily_budget", 0)) / 100
                for c in campaigns
                if c["effective_status"] == "ACTIVE"
            )

            if daily_budget == 0:
                continue

            days_left = ceil(available_to_spend / daily_budget)
            billing_date = today + timedelta(days=days_left)

            if (billing_date - today).days == 3:
                cached_date_str = cache.get(acc_id)
                if cached_date_str == billing_date.isoformat():
                    continue

                acc_name = ACCOUNT_NAMES.get(acc_id, acc_id.replace("act_", ""))
                message = (
                    f"‚ö†Ô∏è <b>{acc_name}</b>\n\n"
                    f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: <b>{spend_cap:.2f} $</b>\n"
                    f"–î–∞—Ç–∞: <b>{billing_date.strftime('%d.%m.%Y')}</b>\n"
                    f"–î–æ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{available_to_spend:.2f} $</b>\n"
                    f"–°—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: <b>{daily_budget:.2f} $</b>\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>"
                )
                await context.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='HTML')
                cache[acc_id] = billing_date.isoformat()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ {acc_id}: {e}")

    save_forecast_cache(cache)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ... # –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –∫–æ–¥–µ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_keyboard = [['–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è']]
    await update.message.reply_text('ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:', reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True))

app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
app.job_queue.run_repeating(check_billing, interval=600, first=10)
app.job_queue.run_daily(daily_report, time=time(hour=9, minute=30, tzinfo=timezone('Asia/Almaty')))
app.job_queue.run_daily(check_billing_forecast, time=time(hour=9, minute=0, tzinfo=timezone('Asia/Almaty')))

if __name__ == "__main__":
    print("\U0001F680 –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)
