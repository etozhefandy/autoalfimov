import asyncio
import json
from math import ceil
from datetime import datetime, timedelta, time
import os

from pytz import timezone
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.api import FacebookAdsApi

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
ACCESS_TOKEN = "EAASZCrBwhoH0BO7xBXr2h2sGTzvWzUyViJjnrXIvmI5w3uRQOszdntxDiFYxXH4hrKTmZBaPKtuthKuNx3rexRev5zAkby2XbrM5UmwzRGz8a2Q4WBDKp3d1ZCZAAhZCeWFBObQayL4XPwrOFQUtuPcGP5XVYubaXjZCsNT467yKBg90O71oVPZCbI0FrWcZAZC4GtgZDZD"
APP_ID = "1336645834088573"
APP_SECRET = "01bf23c5f726c59da318daa82dd0e9dc"
FacebookAdsApi.init(APP_ID, APP_SECRET, ACCESS_TOKEN)

TELEGRAM_TOKEN = "8033028841:AAGud3hSZdR8KQiOSaAcwfbkv8P0p-P3Dt4"
CHAT_ID = "-1002679045097"
FORECAST_CACHE_FILE = "forecast_cache.json"
TZ = timezone("Asia/Almaty")

# –ï—Å–ª–∏ –µ—Å—Ç—å ENV USD_KZT_RATE (–Ω–∞–ø—Ä–∏–º–µ—Ä 490) ‚Äî –≤–æ–∑—å–º—ë–º, –∏–Ω–∞—á–µ 490.
BASE_USD_KZT = float(os.getenv("USD_KZT_RATE", "490"))
USD_KZT_WITH_PLUS5 = BASE_USD_KZT + 5.0

# ====== –ö–ê–ë–ò–ù–ï–¢–´ ======
AD_ACCOUNTS = [
    "act_1415004142524014",  # –ñ–° –ê—Å—Ç–∞–Ω–∞
    "act_719853653795521",   # –ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞
    "act_1206987573792913",  # –ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä
    "act_1108417930211002",  # –ñ–° –ê–∫—Ç–∞—É
    "act_2342025859327675",  # –ñ–° –ê—Ç—ã—Ä–∞—É
    "act_844229314275496",   # –ñ–° –ê–∫—Ç–æ–±–µ
    "act_1333550570916716",  # –ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)
    "act_195526110289107",   # –ñ–° –¢–∞—Ä–∞–∑
    "act_2145160982589338",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç
    "act_2183299115451405",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç 2 (—Ä—è–¥–æ–º —Å –ø–µ—Ä–≤—ã–º)
    "act_508239018969999",   # –§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç
    "act_1357165995492721",  # –ê—Ä–∏—è –°—Ç–µ–ø–∏
    "act_798205335840576",   # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    "act_2310940436006402",  # –¢–µ–ø–ª–æ –ê–ª–º–∞—Ç—ã (–±–µ–∑ –¥–æ–ø –º–µ—Ç—Ä–∏–∫)
    "act_776865548258700",   # –®–∞–Ω—Ö–∞–π –¢–∞—à–∫–µ–Ω—Ç (–±–µ–∑ –¥–æ–ø –º–µ—Ç—Ä–∏–∫)
    "act_1104357140269368",  # –¢–µ–ø–ª–æ –¢–∞—à–∫–µ–Ω—Ç (–±–µ–∑ –¥–æ–ø –º–µ—Ç—Ä–∏–∫)
    # –ù–æ–≤—ã–µ:
    "act_584782470655012",   # TM Group (—Å—Ç–∞–Ω–¥–∞—Ä—Ç + –ø–µ—Ä–µ–ø–∏—Å–∫–∏ + –∑–∞—è–≤–∫–∏ —Å–∞–π—Ç–∞)
    "act_353220323925035",   # Zibak.tj (—Å—Ç–∞–Ω–¥–∞—Ä—Ç + –ø–µ—Ä–µ–ø–∏—Å–∫–∏)
    # –í–ù–ò–ú–ê–ù–ò–ï: –ø–æ –ø—Ä–æ—Å—å–±–µ ‚Äî –∞–∫–∫–∞—É–Ω—Ç—ã Kense —É–¥–∞–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ –∏–∑ —Å–ø–∏—Å–∫–∞, —Ç—É—Ç –∏—Ö –Ω–µ—Ç
]

# –≥–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–ø–µ—Ä–µ–ø–∏—Å–∫–∏"
MESSAGING_ACCOUNTS = {
    "act_1415004142524014",
    "act_1108417930211002",
    "act_2342025859327675",
    "act_1333550570916716",
    "act_844229314275496",
    "act_1206987573792913",
    "act_195526110289107",
    "act_2145160982589338",
    "act_2183299115451405",
    "act_719853653795521",
    "act_353220323925035",   # Zibak.tj
    "act_584782470655012",   # TM Group
}

# –≥–¥–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–∑–∞—è–≤–∫–∏ —Å–∞–π—Ç–∞"
LEAD_FORM_ACCOUNTS = {
    "act_798205335840576",   # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º)
    "act_584782470655012",   # TM Group ‚Äî –Ω—É–∂–Ω—ã –∑–∞—è–≤–∫–∏ —Å–∞–π—Ç–∞
    # (–ö–µ–Ω—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏—Å–∫–ª—é—á–µ–Ω—ã; –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)
}

# –ß–∏—Ç–∞–±–µ–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
ACCOUNT_NAMES = {
    "act_1415004142524014": "–ñ–° –ê—Å—Ç–∞–Ω–∞",
    "act_719853653795521": "–ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
    "act_1206987573792913": "–ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä",
    "act_1108417930211002": "–ñ–° –ê–∫—Ç–∞—É",
    "act_2342025859327675": "–ñ–° –ê—Ç—ã—Ä–∞—É",
    "act_844229314275496": "–ñ–° –ê–∫—Ç–æ–±–µ",
    "act_1333550570916716": "–ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)",
    "act_195526110289107":  "–ñ–° –¢–∞—Ä–∞–∑",
    "act_2145160982589338": "–ñ–° –®—ã–º–∫–µ–Ω—Ç",
    "act_2183299115451405": "–ñ–° –®—ã–º–∫–µ–Ω—Ç 2",
    "act_508239018969999":  "–§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç",
    "act_1357165995492721": "–ê—Ä–∏—è –°—Ç–µ–ø–∏",
    "act_798205335840576":  "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "act_2310940436006402": "–¢–µ–ø–ª–æ –ê–ª–º–∞—Ç—ã",
    "act_776865548258700":  "–®–∞–Ω—Ö–∞–π –¢–∞—à–∫–µ–Ω—Ç",
    "act_1104357140269368": "–¢–µ–ø–ª–æ –¢–∞—à–∫–µ–Ω—Ç",
    "act_584782470655012":  "TM Group",
    "act_353220323925035":  "Zibak.tj",
}

# ====== –í–ù–£–¢–†–ï–ù–ù–ï–ï ======
account_statuses = {}

def format_number(num) -> str:
    try:
        return f"{int(float(num)):,}".replace(",", " ")
    except:
        return "0"

def is_account_active(account_id) -> str:
    try:
        status = AdAccount(account_id).api_get(fields=['account_status'])['account_status']
        return "üü¢" if status == 1 else "üî¥"
    except:
        # –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—á–∏—Ç–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º, –∏ –ø—Ä–æ–ø—É—Å—Ç–∏–º –¥–∞–ª—å—à–µ
        return "üî¥"

def _fetch_insights(account_id, fields, params):
    """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–Ω—Å–∞–π—Ç–æ–≤: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (insights, account_name) –∏–ª–∏ (None, name) –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    try:
        account = AdAccount(account_id)
        insights = account.get_insights(fields=fields, params=params)
        name = account.api_get(fields=['name']).get('name', account_id)
        return insights, name
    except Exception:
        return None, ACCOUNT_NAMES.get(account_id, account_id)

def _actions_to_dict(insight_row):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ actions –≤ —Å–ª–æ–≤–∞—Ä—å {action_type: float(value)}"""
    out = {}
    for a in insight_row.get('actions', []) or []:
        at = a.get('action_type')
        val = a.get('value')
        if at and val is not None:
            try:
                out[at] = float(val)
            except:
                pass
    return out

def get_facebook_data(account_id, date_preset, date_label=''):
    fields = ['impressions', 'cpm', 'clicks', 'cpc', 'spend', 'actions']
    params = {'time_range': date_preset, 'level': 'account'} if isinstance(date_preset, dict) else {'date_preset': date_preset, 'level': 'account'}

    insights, account_name = _fetch_insights(account_id, fields, params)
    date_info = f" ({date_label})" if date_label else ""
    header = f"{is_account_active(account_id)} <b>{account_name}</b>{date_info}\n"

    if not insights:
        # –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
        return None

    row = insights[0] if insights else {}
    report = (
        f"üëÅ –ü–æ–∫–∞–∑—ã: {format_number(row.get('impressions', '0'))}\n"
        f"üéØ CPM: {round(float(row.get('cpm', 0) or 0), 2)} $\n"
        f"üñ± –ö–ª–∏–∫–∏: {format_number(row.get('clicks', '0'))}\n"
        f"üí∏ CPC: {round(float(row.get('cpc', 0) or 0), 2)} $\n"
        f"üíµ –ó–∞—Ç—Ä–∞—Ç—ã: {round(float(row.get('spend', 0) or 0), 2)} $"
    )

    actions = _actions_to_dict(row)

    # –ü–µ—Ä–µ–ø–∏—Å–∫–∏
    if account_id in MESSAGING_ACCOUNTS:
        conv = actions.get('onsite_conversion.messaging_conversation_started_7d', 0.0)
        report += f"\n‚úâÔ∏è –ù–∞—á–∞—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞: {int(conv)}"
        if conv > 0:
            spend = float(row.get('spend', 0) or 0)
            report += f"\nüí¨üí≤ –¶–µ–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏: {round(spend / conv, 2)} $"

    # –ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞
    if account_id in LEAD_FORM_ACCOUNTS:
        # —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞: —Å–Ω–∞—á–∞–ª–∞ submit_application, –∑–∞—Ç–µ–º lead/–ø—Ä–æ—á–µ–µ
        leads = (
            actions.get('offsite_conversion.fb_pixel_submit_application', 0.0)
            or actions.get('offsite_conversion.fb_pixel_lead', 0.0)
            or actions.get('lead', 0.0)
        )
        report += f"\nüì© –ó–∞—è–≤–∫–∏: {int(leads)}"
        if leads > 0:
            spend = float(row.get('spend', 0) or 0)
            report += f"\nüì©üí≤ –¶–µ–Ω–∞ –∑–∞—è–≤–∫–∏: {round(spend / leads, 2)} $"

    return header + report

async def send_report(context, chat_id, period, date_label=''):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç—ã –ø–æ –≤—Å–µ–º –∫–∞–±–∏–Ω–µ—Ç–∞–º + –∑–∞—Ç–µ–º —Å–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤."""
    for acc in AD_ACCOUNTS:
        msg = get_facebook_data(acc, period, date_label)
        if msg:
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='HTML')
    # –¥–æ–±–∏–≤–∞–µ–º —Å–≤–æ–¥–∫–æ–π –ø–æ –±–∏–ª–ª–∏–Ω–≥–∞–º
    billing_text = await build_billing_summary()
    if billing_text:
        await context.bot.send_message(chat_id=chat_id, text=billing_text, parse_mode='HTML')

async def build_billing_summary() -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –±–∏–ª–ª–∏–Ω–≥–æ–≤ –≤ $ –∏ ‚Ç∏ (–ø–æ –∫—É—Ä—Å—É +5‚Ç∏).
       –ê–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ ‚Äî –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    """
    lines = ["<b>üìã –°–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤</b>"]
    had_any = False
    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id)
            info = acc.api_get(fields=['name', 'balance'])
            name = info.get('name', ACCOUNT_NAMES.get(acc_id, acc_id))
            balance_cents = info.get('balance', 0) or 0
            balance_usd = float(balance_cents) / 100.0
            balance_kzt = int(round(balance_usd * USD_KZT_WITH_PLUS5, 0))
            lines.append(f"‚Ä¢ {name} ‚Äî <b>{balance_usd:.2f} $</b> ‚âà <b>{balance_kzt:,} ‚Ç∏</b>".replace(",", " "))
            had_any = True
        except Exception:
            # –Ω–µ—Ç –ø—Ä–∞–≤ / —É–¥–∞–ª—ë–Ω –∏–∑ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
    return "\n".join(lines) if had_any else ""

# ====== –ë–ò–õ–õ–ò–ù–ì-–ü–†–û–ì–ù–û–ó ======
async def check_billing_forecast(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(TZ).date()
    try:
        with open(FORECAST_CACHE_FILE, "r") as f:
            cache = json.load(f)
    except:
        cache = {}

    changed = False
    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id)
            info = acc.api_get(fields=["name", "spend_cap", "amount_spent"])
            spend_cap = float(info.get("spend_cap", 0) or 0) / 100.0
            spent = float(info.get("amount_spent", 0) or 0) / 100.0
            available = spend_cap - spent

            # —Å—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
            daily_budget = 0.0
            for c in acc.get_campaigns(fields=["name", "effective_status", "daily_budget"]):
                if c.get("effective_status") == "ACTIVE":
                    daily_budget += (int(c.get("daily_budget", 0) or 0) / 100.0)

            if daily_budget <= 0:
                continue

            days_left = ceil(available / daily_budget) if available > 0 else 0
            billing_date = today + timedelta(days=days_left)

            if (billing_date - today).days == 3:
                if cache.get(acc_id) != billing_date.isoformat():
                    name = ACCOUNT_NAMES.get(acc_id, acc_id)
                    msg = (
                        f"‚ö†Ô∏è <b>{name}</b>\n\n"
                        f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: <b>{spend_cap:.2f} $</b>\n"
                        f"–î–∞—Ç–∞: <b>{billing_date.strftime('%d.%m.%Y')}</b>\n"
                        f"–î–æ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{available:.2f} $</b>\n"
                        f"–°—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: <b>{daily_budget:.2f} $</b>\n"
                        f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>"
                    )
                    await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
                    cache[acc_id] = billing_date.isoformat()
                    changed = True

        except Exception as e:
            # —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–∞
            continue

    if changed:
        with open(FORECAST_CACHE_FILE, "w") as f:
            json.dump(cache, f)

# ====== –•–ï–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î/–ö–ù–û–ü–û–ö ======
async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/today ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/yesterday ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –≤—á–µ—Ä–∞\n"
        "/week ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é\n"
        "/billing ‚Äî —Å–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤ ($ –∏ ‚Ç∏, –∫—É—Ä—Å +5‚Ç∏)\n\n"
        "–í –ª–∏—á–∫–µ —Ç–∞–∫–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–Ω–æ–ø–∫–∏: ¬´–°–µ–≥–æ–¥–Ω—è¬ª, ¬´–í—á–µ—Ä–∞¬ª, ¬´–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è¬ª."
    )
    await update.effective_chat.send_message(text, parse_mode="HTML")

async def cmd_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    label = datetime.now(TZ).strftime('%d.%m.%Y')
    await send_report(context, update.effective_chat.id, 'today', label)

async def cmd_yesterday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now(TZ) - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, update.effective_chat.id, 'yesterday', label)

async def cmd_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    until = datetime.now(TZ) - timedelta(days=1)
    since = until - timedelta(days=6)
    period = {'since': since.strftime('%Y-%m-%d'), 'until': until.strftime('%Y-%m-%d')}
    label = f"{since.strftime('%d.%m')}-{until.strftime('%d.%m')}"
    await send_report(context, update.effective_chat.id, period, label)

async def cmd_billing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    billing_text = await build_billing_summary()
    if not billing_text:
        billing_text = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –±–∏–ª–ª–∏–Ω–≥–∞–º (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤ –∫ –∞–∫–∫–∞—É–Ω—Ç–∞–º)."
    await update.effective_chat.send_message(billing_text, parse_mode="HTML")

# —Å—Ç–∞—Ä—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ª–∏—á–∫–∏
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()
    if text == '–°–µ–≥–æ–¥–Ω—è':
        await cmd_today(update, context)
    elif text == '–í—á–µ—Ä–∞':
        await cmd_yesterday(update, context)
    elif text == '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è':
        await cmd_week(update, context)

# /start ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º inline-–∫–Ω–æ–ø–∫–∏ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö) + –æ–±—ã—á–Ω—ã–µ –≤ –ª–∏—á–∫–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb_inline = InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today"),
         InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="yesterday"),
         InlineKeyboardButton("–ù–µ–¥–µ–ª—è", callback_data="week")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤", callback_data="billing")]
    ])
    await update.effective_chat.send_message(
        "ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_inline
    )
    # –î–ª—è –ª–∏—á–∫–∏ ‚Äî –¥–æ–±–∞–≤–∏–º —Ä–µ–ø–ª–∞–π-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –Ω–∞–¥–æ)
    if update.effective_chat.type == "private":
        reply_kb = ReplyKeyboardMarkup([['–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è']], resize_keyboard=True)
        await update.effective_chat.send_message("–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∏–∂–µ:", reply_markup=reply_kb)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    await q.answer()
    if q.data == "today":
        await cmd_today(update, context)
    elif q.data == "yesterday":
        await cmd_yesterday(update, context)
    elif q.data == "week":
        await cmd_week(update, context)
    elif q.data == "billing":
        await cmd_billing(update, context)

# ====== –†–ï–ì–£–õ–ê–†–ù–´–ï –î–ñ–û–ë–´ ======
async def check_billing(context: ContextTypes.DEFAULT_TYPE):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç.
       –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Üí –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
    """
    for account_id in AD_ACCOUNTS:
        try:
            account = AdAccount(account_id)
            info = account.api_get(fields=['name', 'account_status', 'balance'])
            status = info.get('account_status')
            # –µ—Å–ª–∏ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∏ —Å—Ç–∞–ª –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω ‚Äî —à–ª—ë–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            if account_id in account_statuses and account_statuses[account_id] == 1 and status != 1:
                name = info.get('name', ACCOUNT_NAMES.get(account_id, account_id))
                balance = float(info.get('balance', 0) or 0) / 100
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è –ê—Ö—Ç—É–Ω–≥! {name}! —É –Ω–∞—Å –±–∏–ª–ª–∏–Ω–≥ - {balance:.2f} $",
                    parse_mode='HTML'
                )
            account_statuses[account_id] = status
        except Exception:
            # –Ω–µ—Ç –ø—Ä–∞–≤–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏, –Ω–∏—á–µ–≥–æ –Ω–µ —à–ª—ë–º
            continue

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now(TZ) - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, CHAT_ID, 'yesterday', label)

# ====== –ó–ê–ü–£–°–ö ======
app = Application.builder().token(TELEGRAM_TOKEN).build()

# –∫–æ–º–∞–Ω–¥—ã
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", cmd_help))
app.add_handler(CommandHandler("today", cmd_today))
app.add_handler(CommandHandler("yesterday", cmd_yesterday))
app.add_handler(CommandHandler("week", cmd_week))
app.add_handler(CommandHandler("billing", cmd_billing))

# inline callbacks
app.add_handler(CallbackQueryHandler(on_callback))

# —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (–ª–∏—á–∫–∞)
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# –¥–∂–æ–±—ã
app.job_queue.run_repeating(check_billing, interval=600, first=10)
app.job_queue.run_daily(daily_report, time=time(hour=9, minute=30, tzinfo=TZ))
app.job_queue.run_daily(check_billing_forecast, time=time(hour=9, minute=0, tzinfo=TZ))

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)
