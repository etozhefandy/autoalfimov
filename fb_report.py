import asyncio
import json
from math import ceil
from datetime import datetime, timedelta, time
from pytz import timezone

from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.api import FacebookAdsApi

from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,   # –æ—Å—Ç–∞–≤–ª—é: –≤–¥—Ä—É–≥ —Ç—ã –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ==== –¢–≤–æ–∏ –∫—Ä–µ–¥—ã ====
ACCESS_TOKEN = "EAASZCrBwhoH0BO7xBXr2h2sGTzvWzUyViJjnrXIvmI5w3uRQOszdntxDiFYxXH4hrKTmZBaPKtuthKuNx3rexRev5zAkby2XbrM5UmwzRGz8a2Q4WBDKp3d1ZCZAAhZCeWFBObQayL4XPwrOFQUtuPcGP5XVYubaXjZCsNT467yKBg90O71oVPZCbI0FrWcZAZC4GtgZDZD"
APP_ID = "1336645834088573"
APP_SECRET = "01bf23c5f726c59da318daa82dd0e9dc"
FacebookAdsApi.init(APP_ID, APP_SECRET, ACCESS_TOKEN)

# ==== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ====
TELEGRAM_TOKEN = "8033028841:AAGud3hSZdR8KQiOSaAcwfbkv8P0p-P3Dt4"
CHAT_ID = "-1002679045097"

FORECAST_CACHE_FILE = "forecast_cache.json"

# ==== –¢–≤–æ–∏ –∞–∫–∫–∞—É–Ω—Ç—ã (–æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ —É —Ç–µ–±—è) ====
AD_ACCOUNTS = [
    "act_1415004142524014", "act_719853653795521", "act_1206987573792913", "act_1108417930211002",
    "act_2342025859327675", "act_844229314275496", "act_1333550570916716", "act_195526110289107",
    "act_2145160982589338", "act_1042955424178074", "act_4030694587199998", "act_508239018969999",
    "act_1357165995492721", "act_798205335840576"
]

MESSAGING_ACCOUNTS = {
    "act_1415004142524014", "act_1108417930211002", "act_2342025859327675", "act_1333550570916716",
    "act_844229314275496", "act_1206987573792913", "act_195526110289107", "act_2145160982589338",
    "act_719853653795521"
}

LEAD_FORM_ACCOUNTS = {
    "act_1042955424178074", "act_4030694587199998", "act_798205335840576"
}

ACCOUNT_NAMES = {
    "act_1415004142524014": "–ñ–° –ê—Å—Ç–∞–Ω–∞", "act_719853653795521": "–ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
    "act_1206987573792913": "–ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä", "act_1108417930211002": "–ñ–° –ê–∫—Ç–∞—É",
    "act_2342025859327675": "–ñ–° –ê—Ç—ã—Ä–∞—É", "act_844229314275496": "–ñ–° –ê–∫—Ç–æ–±–µ",
    "act_1333550570916716": "–ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)", "act_195526110289107": "–ñ–° –¢–∞—Ä–∞–∑",
    "act_2145160982589338": "–ñ–° –®—ã–º–∫–µ–Ω—Ç", "act_1042955424178074": "–∫–µ–Ω—Å–µ 1",
    "act_4030694587199998": "–∫–µ–Ω—Å–µ 2", "act_508239018969999": "–§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç",
    "act_1357165995492721": "–ê—Ä–∏—è –°—Ç–µ–ø–∏", "act_798205335840576": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
}

account_statuses = {}

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------

def is_permission_error(err: Exception) -> bool:
    """–í–µ—Ä–Ω—ë—Ç True, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤ (403 / OAuthException code 200)."""
    s = str(err)
    return "code\": 200" in s or "OAuthException" in s or "has NOT grant ads_management" in s

def is_account_active(account_id):
    try:
        status = AdAccount(account_id).api_get(fields=['account_status'])['account_status']
        return "üü¢" if status == 1 else "üî¥"
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –Ω–æ –º–æ–ª—á–∞
        return "üî¥"

def format_number(num):
    return f"{int(float(num)):,}".replace(",", " ")

# ---------- –î–∞–Ω–Ω—ã–µ –ø–æ –∞–∫–∫–∞—É–Ω—Ç—É ----------

def get_facebook_data(account_id, date_preset, date_label=''):
    account = AdAccount(account_id)
    fields = ['impressions', 'cpm', 'clicks', 'cpc', 'spend', 'actions']
    params = (
        {'time_range': date_preset, 'level': 'account'}
        if isinstance(date_preset, dict)
        else {'date_preset': date_preset, 'level': 'account'}
    )
    try:
        insights = account.get_insights(fields=fields, params=params)
        account_name = account.api_get(fields=['name'])['name']
    except Exception as e:
        # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ (–Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º)
        if is_permission_error(e):
            return ""
        # –ò–Ω–∞—á–µ –ø—Ä–∏—Å—ã–ª–∞–µ–º —Å–≤—ë—Ä–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        return (
            "‚ö† –û—à–∏–±–∫–∞:\n\n"
            f"  Message: Call was not successful\n"
            f"  Method:  GET\n"
            f"  Path:    https://graph.facebook.com/v23.0/{account_id}/insights\n"
            f"  Params:  {params}\n\n"
            f"  {e}"
        )

    date_info = f" ({date_label})" if date_label else ""
    report = f"{is_account_active(account_id)} <b>{account_name}</b>{date_info}\n"

    if not insights:
        return report + "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    insight = insights[0]
    report += (
        f"üëÅ –ü–æ–∫–∞–∑—ã: {format_number(insight.get('impressions', '0'))}\n"
        f"üéØ CPM: {round(float(insight.get('cpm', 0)), 2)} $\n"
        f"üñ± –ö–ª–∏–∫–∏: {format_number(insight.get('clicks', '0'))}\n"
        f"üí∏ CPC: {round(float(insight.get('cpc', 0)), 2)} $\n"
        f"üíµ –ó–∞—Ç—Ä–∞—Ç—ã: {round(float(insight.get('spend', 0)), 2)} $"
    )

    actions = {a['action_type']: float(a['value']) for a in insight.get('actions', [])}

    if account_id in MESSAGING_ACCOUNTS:
        conv = actions.get('onsite_conversion.messaging_conversation_started_7d', 0)
        report += f"\n‚úâÔ∏è –ù–∞—á–∞—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞: {int(conv)}"
        if conv > 0:
            report += f"\nüí¨üí≤ –¶–µ–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏: {round(float(insight.get('spend', 0)) / conv, 2)} $"

    if account_id in LEAD_FORM_ACCOUNTS:
        if account_id == 'act_4030694587199998':
            leads = actions.get('Website Submit Applications', 0)
        else:
            leads = (
                actions.get('offsite_conversion.fb_pixel_submit_application', 0) or
                actions.get('offsite_conversion.fb_pixel_lead', 0) or
                actions.get('lead', 0)
            )
        report += f"\nüì© –ó–∞—è–≤–∫–∏: {int(leads)}"
        if leads > 0:
            report += f"\nüì©üí≤ –¶–µ–Ω–∞ –∑–∞—è–≤–∫–∏: {round(float(insight.get('spend', 0)) / leads, 2)} $"

    return report

async def send_report(context, chat_id, period, date_label=''):
    for acc in AD_ACCOUNTS:
        msg = get_facebook_data(acc, period, date_label)
        if msg:  # –ø—É—Å—Ç—ã–µ (–∏–∑-–∑–∞ 403) –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='HTML')

# ---------- –ë–∏–ª–ª–∏–Ω–≥ ----------

async def check_billing(context: ContextTypes.DEFAULT_TYPE):
    global account_statuses
    for account_id in AD_ACCOUNTS:
        try:
            account = AdAccount(account_id)
            info = account.api_get(fields=['name', 'account_status', 'balance'])
            status = info.get('account_status')

            if account_id in account_statuses and account_statuses[account_id] == 1 and status != 1:
                name = info.get('name')
                balance = float(info.get('balance', 0)) / 100
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è –ê—Ö—Ç—É–Ω–≥! {name}! —É –Ω–∞—Å –±–∏–ª–ª–∏–Ω–≥ - {balance:.2f} $",
                    parse_mode='HTML'
                )
            account_statuses[account_id] = status
        except Exception as e:
            if is_permission_error(e):
                continue
            await context.bot.send_message(chat_id=CHAT_ID, text=f"‚ö† –û—à–∏–±–∫–∞: {e}", parse_mode='HTML')

async def show_billing_now(chat_id: str, context: ContextTypes.DEFAULT_TYPE):
    """–ö–Ω–æ–ø–∫–∞ '–ë–∏–ª–ª–∏–Ω–≥': –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º != 1 (–∏–ª–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–ª–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)."""
    lines = []
    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id).api_get(fields=['name', 'account_status', 'balance'])
            if acc.get('account_status') != 1:
                name = acc.get('name', acc_id)
                bal = float(acc.get('balance', 0)) / 100
                lines.append(f"üî¥ <b>{name}</b> ‚Äî {bal:.2f} $")
        except Exception as e:
            if is_permission_error(e):
                continue
            lines.append(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ {acc_id}: {e}")

    text = "‚úÖ –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã" if not lines else "–°–µ–π—á–∞—Å –≤ –±–∏–ª–ª–∏–Ω–≥–∞—Ö:\n" + "\n".join(lines)
    await context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')

# ---------- –ü—Ä–æ–≥–Ω–æ–∑ —Å–ø–∏—Å–∞–Ω–∏–π (–∫–∞–∫ –±—ã–ª–æ —É —Ç–µ–±—è) ----------

async def check_billing_forecast(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(timezone("Asia/Almaty")).date()
    try:
        with open(FORECAST_CACHE_FILE, "r") as f:
            cache = json.load(f)
    except Exception:
        cache = {}

    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id)
            info = acc.api_get(fields=["name", "spend_cap", "amount_spent"])
            spend_cap = float(info.get("spend_cap", 0)) / 100
            spent = float(info.get("amount_spent", 0)) / 100
            available = spend_cap - spent

            # daily budgets
            campaigns = acc.get_campaigns(fields=["name", "effective_status", "daily_budget"])
            daily_budget = sum(
                int(c.get("daily_budget", 0)) / 100
                for c in campaigns
                if c.get("effective_status") == "ACTIVE"
            )
            if daily_budget == 0:
                continue

            days_left = ceil(available / daily_budget)
            billing_date = today + timedelta(days=days_left)
            if (billing_date - today).days == 3:
                if cache.get(acc_id) == billing_date.isoformat():
                    continue
                name = ACCOUNT_NAMES.get(acc_id, acc_id)
                msg = (
                    f"‚ö†Ô∏è <b>{name}</b>\n\n"
                    f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: <b>{spend_cap:.2f} $</b>\n"
                    f"–î–∞—Ç–∞: <b>{billing_date.strftime('%d.%m.%Y')}</b>\n"
                    f"–î–æ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{available:.2f} $</b>\n"
                    f"–°—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: <b>{daily_budget:.2f} $</b>\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>"
                )
                await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
                cache[acc_id] = billing_date.isoformat()

        except Exception as e:
            if is_permission_error(e):
                continue
            # –≤ –ª–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ {acc_id}: {e}")

    with open(FORECAST_CACHE_FILE, "w") as f:
        json.dump(cache, f)

# ---------- –ö–Ω–æ–ø–∫–∏ (inline) –¥–ª—è –≥—Ä—É–ø–ø/–ª–∏—á–∫–∏ ----------

def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today")],
        [InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="yesterday")],
        [InlineKeyboardButton("–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è", callback_data="week")],
        [InlineKeyboardButton("–ë–∏–ª–ª–∏–Ω–≥", callback_data="billing")]
    ])

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≤ –≥—Ä—É–ø–ø–∞—Ö –∫–Ω–æ–ø–∫–∏ –æ–∫–∞–∂—É—Ç—Å—è –ü–û–î —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–æ—Ç–∞ (inline)
    if update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:",
            reply_markup=main_keyboard()
        )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ö–Ω–æ–ø–∫–∏:\n"
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ –í—á–µ—Ä–∞ ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –≤—á–µ—Ä–∞\n"
        "‚Ä¢ –ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π\n"
        "‚Ä¢ –ë–∏–ª–ª–∏–Ω–≥ ‚Äî —Å–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º ($)\n"
    )
    if update.effective_chat:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

async def callback_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π inline-–∫–Ω–æ–ø–æ–∫ –≤ –≥—Ä—É–ø–ø–µ/–ª–∏—á–∫–µ."""
    q = update.callback_query
    if not q:
        return
    await q.answer()
    chat_id = q.message.chat_id

    if q.data == "today":
        label = datetime.now().strftime('%d.%m.%Y')
        await send_report(context, chat_id, 'today', label)
    elif q.data == "yesterday":
        label = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
        await send_report(context, chat_id, 'yesterday', label)
    elif q.data == "week":
        until = datetime.now() - timedelta(days=1)
        since = until - timedelta(days=6)
        period = {'since': since.strftime('%Y-%m-%d'), 'until': until.strftime('%Y-%m-%d')}
        label = f"{since.strftime('%d.%m')}-{until.strftime('%d.%m')}"
        await send_report(context, chat_id, period, label)
    elif q.data == "billing":
        await show_billing_now(chat_id, context)

# ---------- –°—Ç–∞—Ä—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ (–æ—Å—Ç–∞–≤–∏–ª —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) ----------

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∏–Ω–æ–≥–¥–∞ –≤ –≥—Ä—É–ø–ø–∞—Ö –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –∞–ø–¥–µ–π—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not update.message or not update.message.text:
        return

    text = update.message.text.strip()
    if text == '–°–µ–≥–æ–¥–Ω—è':
        label = datetime.now().strftime('%d.%–º.%Y')
        await send_report(context, update.message.chat_id, 'today', label)
    elif text == '–í—á–µ—Ä–∞':
        label = (datetime.now() - timedelta(days=1)).strftime('%d.%–º.%Y')
        await send_report(context, update.message.chat_id, 'yesterday', label)
    elif text == '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è':
        until = datetime.now() - timedelta(days=1)
        since = until - timedelta(days=6)
        period = {'since': since.strftime('%Y-%m-%d'), 'until': until.strftime('%Y-%m-%d')}
        label = f"{since.strftime('%d.%–º')}-{until.strftime('%d.%–º')}"
        await send_report(context, update.message.chat_id, period, label)

# ---------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ----------

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now(timezone('Asia/Almaty')) - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, CHAT_ID, 'yesterday', label)
    # –ø–æ—Å–ª–µ –æ—Ç—á—ë—Ç–æ–≤ ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏–ª–ª–∏–Ω–≥–æ–≤
    await show_billing_now(CHAT_ID, context)

# ---------- –ó–∞–ø—É—Å–∫ ----------

app = Application.builder().token(TELEGRAM_TOKEN).build()

app.add_handler(CommandHandler("start", cmd_start))
app.add_handler(CommandHandler("help", cmd_help))
app.add_handler(CallbackQueryHandler(callback_router))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∏–ª–ª–∏–Ω–≥–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç (–∫–∞–∫ –±—ã–ª–æ)
app.job_queue.run_repeating(check_billing, interval=600, first=10)
# –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç + —Å–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤
app.job_queue.run_daily(daily_report, time=time(hour=9, minute=30, tzinfo=timezone('Asia/Almaty')))
# –µ–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–ø–∏—Å–∞–Ω–∏–π (–∑–∞ 3 –¥–Ω—è)
app.job_queue.run_daily(check_billing_forecast, time=time(hour=9, minute=0, tzinfo=timezone('Asia/Almaty')))

if __name__ == "__main__":
    print("\U0001F680 –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)
