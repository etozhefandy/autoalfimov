import asyncio
import json
import re
from math import ceil
from datetime import datetime, timedelta, time
from pytz import timezone
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.api import FacebookAdsApi
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ========= CONFIG =========
ACCESS_TOKEN = "EAASZCrBwhoH0BO7xBXr2h2sGTzvWzUyViJjnrXIvmI5w3uRQOszdntxDiFYxXH4hrKTmZBaPKtuthKuNx3rexRev5zAkby2XbrM5UmwzRG–∑8a2Q4WBDKp3d1ZCZAAhZCeWFBObQayL4XPwrOFQUtuPcGP5XVYubaXjZCsNT467yKBg90O71oVPZCbI0FrWcZAZC4GtgZDZD"
APP_ID = "1336645834088573"
APP_SECRET = "01bf23c5f726c59da318daa82dd0e9dc"
FacebookAdsApi.init(APP_ID, APP_SECRET, ACCESS_TOKEN)

# –ü–æ—Ä—è–¥–æ–∫ –æ—Ç—á—ë—Ç–∞ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–ö–ï–ù–°–ï —É–¥–∞–ª–µ–Ω—ã!)
AD_ACCOUNTS = [
    "act_1415004142524014",  # –ñ–° –ê—Å—Ç–∞–Ω–∞
    "act_719853653795521",   # –ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞
    "act_1206987573792913",  # –ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä
    "act_1108417930211002",  # –ñ–° –ê–∫—Ç–∞—É
    "act_2342025859327675",  # –ñ–° –ê—Ç—ã—Ä–∞—É
    "act_844229314275496",   # –ñ–° –ê–∫—Ç–æ–±–µ
    "act_1333550570916716",  # –ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)
    "act_195526110289107",   # –ñ–° –¢–∞—Ä–∞–∑
    "act_2145160982589338",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç
    "act_2183299115451405",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç 2 (—Ä—è–¥–æ–º —Å –®—ã–º–∫–µ–Ω—Ç)
    "act_508239018969999",   # –§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç
    "act_1357165995492721",  # –ê—Ä–∏—è –°—Ç–µ–ø–∏
    "act_798205335840576",   # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    "act_2310940436006402",  # –¢–µ–ø–ª–æ –ê–ª–º–∞—Ç—ã
    "act_1104357140269368",  # –¢–µ–ø–ª–æ –¢–∞—à–∫–µ–Ω—Ç
    "act_776865548258700",   # –®–∞–Ω—Ö–∞–π –¢–∞—à–∫–µ–Ω—Ç
]

# –ê–∫–∫–∞—É–Ω—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏
MESSAGING_ACCOUNTS = {
    "act_1415004142524014",
    "act_1108417930211002",
    "act_2342025859327675",
    "act_1333550570916716",
    "act_844229314275496",
    "act_1206987573792913",
    "act_195526110289107",
    "act_2145160982589338",
    "act_719853653795521",
    "act_2183299115451405",  # –¥–æ–±–∞–≤–∏–ª–∏ –®—ã–º–∫–µ–Ω—Ç 2
}

# –ê–∫–∫–∞—É–Ω—Ç—ã, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Å—á–∏—Ç–∞–µ–º ¬´–∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞¬ª
# (–ö–ï–ù–°–ï —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞)
LEAD_FORM_ACCOUNTS = {
    "act_798205335840576",  # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–∞–∫ –±—ã–ª–æ)
    # –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è ‚Äî –¥–æ–±–∞–≤–∏–º —Å—é–¥–∞ –¥—Ä—É–≥–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
}

TELEGRAM_TOKEN = "8033028841:AAGud3hSZdR8KQiOSaAcwfbkv8P0p-P3Dt4"
CHAT_ID = "-1002679045097"
FORECAST_CACHE_FILE = "forecast_cache.json"

# –ß–µ–ª–æ–≤–µ–∫–æ-—á–∏—Ç–∞–µ–º—ã–µ –∏–º–µ–Ω–∞
ACCOUNT_NAMES = {
    "act_1415004142524014": "–ñ–° –ê—Å—Ç–∞–Ω–∞",
    "act_719853653795521": "–ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
    "act_1206987573792913": "–ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä",
    "act_1108417930211002": "–ñ–° –ê–∫—Ç–∞—É",
    "act_2342025859327675": "–ñ–° –ê—Ç—ã—Ä–∞—É",
    "act_844229314275496": "–ñ–° –ê–∫—Ç–æ–±–µ",
    "act_1333550570916716": "–ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)",
    "act_195526110289107": "–ñ–° –¢–∞—Ä–∞–∑",
    "act_2145160982589338": "–ñ–° –®—ã–º–∫–µ–Ω—Ç",
    "act_2183299115451405": "–ñ–° –®—ã–º–∫–µ–Ω—Ç 2",
    "act_508239018969999": "–§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç",
    "act_1357165995492721": "–ê—Ä–∏—è –°—Ç–µ–ø–∏",
    "act_798205335840576": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
    "act_2310940436006402": "–¢–µ–ø–ª–æ –ê–ª–º–∞—Ç—ã",
    "act_1104357140269368": "–¢–µ–ø–ª–æ –¢–∞—à–∫–µ–Ω—Ç",
    "act_776865548258700":  "–®–∞–Ω—Ö–∞–π –¢–∞—à–∫–µ–Ω—Ç",
}

account_statuses = {}

# ========= HELPERS =========
def is_perm_error(exc: Exception) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∞–≤/403 (#200)."""
    s = str(exc)
    return "(#200)" in s or "code\": 200" in s or "Status:  403" in s

def is_account_active(account_id):
    try:
        status = AdAccount(account_id).api_get(fields=['account_status'])['account_status']
        return "üü¢" if status == 1 else "üî¥"
    except Exception:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π, –Ω–µ —à—É–º–∏–º
        return "üî¥"

def format_number(num):
    return f"{int(float(num)):,}".replace(",", " ")

# ========= CORE =========
def get_facebook_data(account_id, date_preset, date_label=''):
    account = AdAccount(account_id)
    fields = ['impressions', 'cpm', 'clicks', 'cpc', 'spend', 'actions']
    params = {'time_range': date_preset, 'level': 'account'} if isinstance(date_preset, dict) else {'date_preset': date_preset, 'level': 'account'}

    try:
        insights = account.get_insights(fields=fields, params=params)
        account_name = ACCOUNT_NAMES.get(account_id, account.api_get(fields=['name'])['name'])
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
        if is_perm_error(e):
            return None
        # –ò–Ω–∞—á–µ –≤–µ—Ä–Ω—ë–º –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É-–æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return f"‚ö† –û—à–∏–±–∫–∞ –ø–æ {ACCOUNT_NAMES.get(account_id, account_id)}:\n{e}"

    date_info = f" ({date_label})" if date_label else ""
    report = f"{is_account_active(account_id)} <b>{account_name}</b>{date_info}\n"

    if not insights:
        return report + "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    insight = insights[0]
    report += (
        f"üëÅ –ü–æ–∫–∞–∑—ã: {format_number(insight.get('impressions', '0'))}\n"
        f"üéØ CPM: {round(float(insight.get('cpm', 0)), 2)} $\n"
        f"üñ± –ö–ª–∏–∫–∏: {format_number(insight.get('clicks', '0'))}\n"
        f"üí∏ CPC: {round(float(insight.get('cpc', 0)), 2)} $\n"
        f"üíµ –ó–∞—Ç—Ä–∞—Ç—ã: {round(float(insight.get('spend', 0)), 2)} $"
    )

    # –î–æ–ø. –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    actions = {a['action_type']: float(a['value']) for a in insight.get('actions', [])}

    # –ü–µ—Ä–µ–ø–∏—Å–∫–∏
    if account_id in MESSAGING_ACCOUNTS:
        conv = actions.get('onsite_conversion.messaging_conversation_started_7d', 0)
        report += f"\n‚úâÔ∏è –ù–∞—á–∞—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞: {int(conv)}"
        if conv > 0:
            spend = float(insight.get('spend', 0))
            report += f"\nüí¨üí≤ –¶–µ–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏: {round(spend / conv, 2)} $"

    # –ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞ (–æ—Å—Ç–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö)
    if account_id in LEAD_FORM_ACCOUNTS:
        leads = (
            actions.get('offsite_conversion.fb_pixel_submit_application', 0) or
            actions.get('offsite_conversion.fb_pixel_lead', 0) or
            actions.get('lead', 0)
        )
        report += f"\nüì© –ó–∞—è–≤–∫–∏: {int(leads)}"
        if leads > 0:
            spend = float(insight.get('spend', 0))
            report += f"\nüì©üí≤ –¶–µ–Ω–∞ –∑–∞—è–≤–∫–∏: {round(spend / leads, 2)} $"

    return report

async def send_report(context, chat_id, period, date_label=''):
    for acc in AD_ACCOUNTS:
        msg = get_facebook_data(acc, period, date_label)
        if msg:  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –ø—Ä–∞–≤/403
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='HTML')

async def check_billing(context: ContextTypes.DEFAULT_TYPE):
    global account_statuses
    for account_id in AD_ACCOUNTS:
        try:
            account = AdAccount(account_id)
            info = account.api_get(fields=['name', 'account_status', 'balance'])
            status = info.get('account_status')
            if account_id in account_statuses and account_statuses[account_id] == 1 and status != 1:
                name = ACCOUNT_NAMES.get(account_id, info.get('name'))
                balance = float(info.get('balance', 0)) / 100
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è –ê—Ö—Ç—É–Ω–≥! {name}! —É –Ω–∞—Å –±–∏–ª–ª–∏–Ω–≥ - {balance:.2f} $",
                    parse_mode='HTML'
                )
            account_statuses[account_id] = status
        except Exception as e:
            # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏–º –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –ø—Ä–∞–≤
            if is_perm_error(e):
                continue
            await context.bot.send_message(chat_id=CHAT_ID, text=f"‚ö† –û—à–∏–±–∫–∞: {e}", parse_mode='HTML')

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now(timezone('Asia/Almaty')) - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, CHAT_ID, 'yesterday', label)

# ======== –ü–†–û–ì–ù–û–ó –ë–ò–õ–õ–ò–ù–ì–ê ========
async def check_billing_forecast(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(timezone("Asia/Almaty")).date()
    try:
        with open(FORECAST_CACHE_FILE, "r") as f:
            cache = json.load(f)
    except Exception:
        cache = {}

    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id)
            info = acc.api_get(fields=["name", "spend_cap", "amount_spent"])
            spend_cap = float(info.get("spend_cap", 0)) / 100
            spent = float(info.get("amount_spent", 0)) / 100
            available = spend_cap - spent

            # –°—É–º–º–∞ –¥–Ω–µ–≤–Ω—ã—Ö –±—é–¥–∂–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
            daily_budget = sum(
                int(c.get("daily_budget", 0)) / 100
                for c in acc.get_campaigns(fields=["name", "effective_status", "daily_budget"])
                if c.get("effective_status") == "ACTIVE"
            )
            if daily_budget <= 0:
                continue

            days_left = ceil(available / daily_budget) if available > 0 else 0
            billing_date = today + timedelta(days=days_left)

            if (billing_date - today).days == 3:
                if cache.get(acc_id) == billing_date.isoformat():
                    continue
                name = ACCOUNT_NAMES.get(acc_id, acc_id)
                msg = (
                    f"‚ö†Ô∏è <b>{name}</b>\n\n"
                    f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: <b>{spend_cap:.2f} $</b>\n"
                    f"–î–∞—Ç–∞: <b>{billing_date.strftime('%d.%m.%Y')}</b>\n"
                    f"–î–æ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{available:.2f} $</b>\n"
                    f"–°—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: <b>{daily_budget:.2f} $</b>\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>"
                )
                await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
                cache[acc_id] = billing_date.isoformat()

        except Exception as e:
            # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã –±–µ–∑ –ø—Ä–∞–≤
            if is_perm_error(e):
                continue
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ {acc_id}: {e}")

    with open(FORECAST_CACHE_FILE, "w") as f:
        json.dump(cache, f)

# ======== TELEGRAM ========
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∑–∞—â–∏—Ç–∞ –æ—Ç –∞–ø–¥–µ–π—Ç–æ–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ (—Å—Ç–∏–∫–µ—Ä—ã/–∫–Ω–æ–ø–∫–∏ –∏ —Ç.–¥.)
    if not update.message or not update.message.text:
        return

    text = update.message.text
    if text == '–°–µ–≥–æ–¥–Ω—è':
        label = datetime.now().strftime('%d.%m.%Y')
        await send_report(context, update.message.chat_id, 'today', label)
    elif text == '–í—á–µ—Ä–∞':
        label = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
        await send_report(context, update.message.chat_id, 'yesterday', label)
    elif text == '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è':
        until = datetime.now() - timedelta(days=1)
        since = until - timedelta(days=6)
        period = {'since': since.strftime('%Y-%m-%d'), 'until': until.strftime('%Y-%m-%d')}
        label = f"{since.strftime('%d.%m')}-{until.strftime('%d.%m')}"
        await send_report(context, update.message.chat_id, period, label)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è']]
    await update.message.reply_text('ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:', reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

# ======== APP ========
app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
app.job_queue.run_repeating(check_billing, interval=600, first=10)
app.job_queue.run_daily(daily_report, time=time(hour=9, minute=30, tzinfo=timezone('Asia/Almaty')))
app.job_queue.run_daily(check_billing_forecast, time=time(hour=9, minute=0, tzinfo=timezone('Asia/Almaty')))

if __name__ == "__main__":
    print("\U0001F680 –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)
