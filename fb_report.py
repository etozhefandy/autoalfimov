# fb_report.py
import os
import asyncio
import json
import re
from math import ceil
from datetime import datetime, timedelta, time
from pytz import timezone
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.api import FacebookAdsApi
from facebook_business.exceptions import FacebookRequestError
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
# –¢–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Ç–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –∏ –Ω–µ –ª–æ–º–∞–µ—Ç—Å—è –ø—Ä–∏ –∫–æ–ø–∏–ø–∞—Å—Ç–µ)
ACCESS_TOKEN = (os.getenv("EAASZCrBwhoH0BPdPmD8GLCxCSDZBFJDAP9C2VJjbQl3W9ZBsNiRMyKHK8fvZATnBVKDxtcJizibfMBta2wr7MRjHgj6Hv9uXDz619r9WKMBmaSqwE6mmgNDkkx3ZC7Qp80PvYHbKCUAp9sbIUdxjk0UFfVYTgs1zs0mbLz3VvkulI4RrbuUTzLsloFI4ExQZDZD") or "").strip()
APP_ID = "1336645834088573"
APP_SECRET = "01bf23c5f726c59da318daa82dd0e9dc"

def _assert_token_ok(tok: str):
    if not tok or len(tok) < 50:
        raise ValueError("EAASZCrBwhoH0BPdPmD8GLCxCSDZBFJDAP9C2VJjbQl3W9ZBsNiRMyKHK8fvZATnBVKDxtcJizibfMBta2wr7MRjHgj6Hv9uXDz619r9WKMBmaSqwE6mmgNDkkx3ZC7Qp80PvYHbKCUAp9sbIUdxjk0UFfVYTgs1zs0mbLz3VvkulI4RrbuUTzLsloFI4ExQZDZD")
    try:
        tok.encode("ascii")
    except UnicodeEncodeError:
        raise ValueError("EAASZCrBwhoH0BPdPmD8GLCxCSDZBFJDAP9C2VJjbQl3W9ZBsNiRMyKHK8fvZATnBVKDxtcJizibfMBta2wr7MRjHgj6Hv9uXDz619r9WKMBmaSqwE6mmgNDkkx3ZC7Qp80PvYHbKCUAp9sbIUdxjk0UFfVYTgs1zs0mbLz3VvkulI4RrbuUTzLsloFI4ExQZDZD")

_assert_token_ok(ACCESS_TOKEN)
FacebookAdsApi.init(APP_ID, APP_SECRET, ACCESS_TOKEN)

# –ü–æ—Ä—è–¥–æ–∫ –æ—Ç—á—ë—Ç–æ–≤:
AD_ACCOUNTS = [
    "act_1415004142524014",  # –ñ–° –ê—Å—Ç–∞–Ω–∞
    "act_719853653795521",   # –ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞
    "act_1206987573792913",  # –ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä
    "act_1108417930211002",  # –ñ–° –ê–∫—Ç–∞—É
    "act_2342025859327675",  # –ñ–° –ê—Ç—ã—Ä–∞—É
    "act_844229314275496",   # –ñ–° –ê–∫—Ç–æ–±–µ
    "act_1333550570916716",  # –ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)
    "act_195526110289107",   # –ñ–° –¢–∞—Ä–∞–∑
    "act_2145160982589338",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç
    "act_2183299115451405",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç 2
    "act_2310940436006402",  # –¢–µ–ø–ª–æ –ê–ª–º–∞—Ç—ã
    "act_1104357140269368",  # –¢–µ–ø–ª–æ –¢–∞—à–∫–µ–Ω—Ç
    "act_776865548258700",   # –®–∞–Ω—Ö–∞–π –¢–∞—à–∫–µ–Ω—Ç
    "act_508239018969999",   # –§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç
    "act_1357165995492721",  # –ê—Ä–∏—è –°—Ç–µ–ø–∏
    "act_798205335840576",   # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
]

# –ê–∫–∫–∞—É–Ω—Ç—ã, –≥–¥–µ —Å—á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏
MESSAGING_ACCOUNTS = {
    "act_1415004142524014",  # –ñ–° –ê—Å—Ç–∞–Ω–∞
    "act_1108417930211002",  # –ñ–° –ê–∫—Ç–∞—É
    "act_2342025859327675",  # –ñ–° –ê—Ç—ã—Ä–∞—É
    "act_1333550570916716",  # –ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)
    "act_844229314275496",   # –ñ–° –ê–∫—Ç–æ–±–µ
    "act_1206987573792913",  # –ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä
    "act_195526110289107",   # –ñ–° –¢–∞—Ä–∞–∑
    "act_2145160982589338",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç
    "act_719853653795521",   # –ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞
    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—é–¥–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë
}

# –ê–∫–∫–∞—É–Ω—Ç—ã, –≥–¥–µ —Å—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞ (submit application / lead pixel)
LEAD_FORM_ACCOUNTS = {
    "act_798205335840576",   # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    # –ö–µ–Ω—Å–µ —É–¥–∞–ª–µ–Ω—ã –ø–æ —Ç–≤–æ–µ–π –ø—Ä–æ—Å—å–±–µ
}

ACCOUNT_NAMES = {
    "act_1415004142524014": "–ñ–° –ê—Å—Ç–∞–Ω–∞",
    "act_719853653795521": "–ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
    "act_1206987573792913": "–ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä",
    "act_1108417930211002": "–ñ–° –ê–∫—Ç–∞—É",
    "act_2342025859327675": "–ñ–° –ê—Ç—ã—Ä–∞—É",
    "act_844229314275496": "–ñ–° –ê–∫—Ç–æ–±–µ",
    "act_1333550570916716": "–ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)",
    "act_195526110289107": "–ñ–° –¢–∞—Ä–∞–∑",
    "act_2145160982589338": "–ñ–° –®—ã–º–∫–µ–Ω—Ç",
    "act_2183299115451405": "–ñ–° –®—ã–º–∫–µ–Ω—Ç 2",
    "act_2310940436006402": "–¢–µ–ø–ª–æ –ê–ª–º–∞—Ç—ã",
    "act_1104357140269368": "–¢–µ–ø–ª–æ –¢–∞—à–∫–µ–Ω—Ç",
    "act_776865548258700": "–®–∞–Ω—Ö–∞–π –¢–∞—à–∫–µ–Ω—Ç",
    "act_508239018969999": "–§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç",
    "act_1357165995492721": "–ê—Ä–∏—è –°—Ç–µ–ø–∏",
    "act_798205335840576": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
}

TELEGRAM_TOKEN = "8033028841:AAGud3hSZdR8KQiOSaAcwfbkv8P0p-P3Dt4"
CHAT_ID = "-1002679045097"  # –≥—Ä—É–ø–ø–∞
FORECAST_CACHE_FILE = "forecast_cache.json"

account_statuses = {}

def is_account_active(account_id):
    try:
        status = AdAccount(account_id).api_get(fields=['account_status'])['account_status']
        return "üü¢" if status == 1 else "üî¥"
    except FacebookRequestError as e:
        # –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤/—Ç–æ–∫–µ–Ω –ø–ª–æ—Ö–æ–π ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π, –Ω–µ –≤–∞–ª–∏–º –≤—Å—ë
        return "üî¥"
    except Exception:
        return "üî¥"

def format_number(num):
    return f"{int(float(num)):,}".replace(",", " ")

def get_facebook_data(account_id, date_preset, date_label=''):
    account = AdAccount(account_id)
    fields = ['impressions', 'cpm', 'clicks', 'cpc', 'spend', 'actions']
    params = {'time_range': date_preset, 'level': 'account'} if isinstance(date_preset, dict) \
        else {'date_preset': date_preset, 'level': 'account'}

    try:
        insights = account.get_insights(fields=fields, params=params)
        account_name = account.api_get(fields=['name'])['name']
    except FacebookRequestError as e:
        # code 190 ‚Äî —Ç–æ–∫–µ–Ω –±–∏—Ç—ã–π/–ø—Ä–æ—Å—Ä–æ—á–µ–Ω
        if getattr(e, "api_error_code", None) == 190:
            return "‚ö† –¢–æ–∫–µ–Ω Facebook –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (code 190). –û–±–Ω–æ–≤–∏—Ç–µ FB_ACCESS_TOKEN."
        # code 200/403 ‚Äî –Ω–µ—Ç –ø—Ä–∞–≤/—É–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        return f"‚ö† –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É {account_id.replace('act_','')} ({e.api_error_code}). –ü—Ä–æ–ø—É—Å–∫–∞—é."
    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞: {str(e)}"

    date_info = f" ({date_label})" if date_label else ""
    report = f"{is_account_active(account_id)} <b>{account_name}</b>{date_info}\n"

    if not insights:
        return report + "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    insight = insights[0]
    report += (
        f"üëÅ –ü–æ–∫–∞–∑—ã: {format_number(insight.get('impressions', '0'))}\n"
        f"üéØ CPM: {round(float(insight.get('cpm', 0)), 2)} $\n"
        f"üñ± –ö–ª–∏–∫–∏: {format_number(insight.get('clicks', '0'))}\n"
        f"üí∏ CPC: {round(float(insight.get('cpc', 0)), 2)} $\n"
        f"üíµ –ó–∞—Ç—Ä–∞—Ç—ã: {round(float(insight.get('spend', 0)), 2)} $"
    )

    # Actions –¥–ª—è –¥–æ–ø.–º–µ—Ç—Ä–∏–∫
    actions_list = insight.get('actions', []) or []
    actions = {a.get('action_type'): float(a.get('value', 0)) for a in actions_list if a.get('action_type')}

    # –ü–µ—Ä–µ–ø–∏—Å–∫–∏
    if account_id in MESSAGING_ACCOUNTS:
        conv = actions.get('onsite_conversion.messaging_conversation_started_7d', 0)
        report += f"\n‚úâÔ∏è –ù–∞—á–∞—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞: {int(conv)}"
        if conv > 0:
            spend = float(insight.get('spend', 0))
            report += f"\nüí¨üí≤ –¶–µ–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏: {round(spend / conv, 2)} $"

    # –ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤)
    if account_id in LEAD_FORM_ACCOUNTS:
        leads = (
            actions.get('offsite_conversion.fb_pixel_submit_application', 0) or
            actions.get('offsite_conversion.fb_pixel_lead', 0) or
            actions.get('lead', 0)
        )
        report += f"\nüì© –ó–∞—è–≤–∫–∏: {int(leads)}"
        if leads > 0:
            spend = float(insight.get('spend', 0))
            report += f"\nüì©üí≤ –¶–µ–Ω–∞ –∑–∞—è–≤–∫–∏: {round(spend / leads, 2)} $"

    return report

async def send_report(context, chat_id, period, date_label=''):
    for acc in AD_ACCOUNTS:
        msg = get_facebook_data(acc, period, date_label)
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='HTML')

async def check_billing(context: ContextTypes.DEFAULT_TYPE):
    global account_statuses
    for account_id in AD_ACCOUNTS:
        try:
            account = AdAccount(account_id)
            info = account.api_get(fields=['name', 'account_status', 'balance'])
            status = info.get('account_status')
            # —Å–º–µ–Ω–∏–ª—Å—è —Å 1 (OK) –Ω–∞ –¥—Ä—É–≥–æ–π ‚Äî —Ç—Ä–µ–≤–æ–≥–∞
            if account_id in account_statuses and account_statuses[account_id] == 1 and status != 1:
                name = info.get('name')
                balance = float(info.get('balance', 0)) / 100
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è –ê—Ö—Ç—É–Ω–≥! {name}! —É –Ω–∞—Å –±–∏–ª–ª–∏–Ω–≥ - {balance:.2f} $",
                    parse_mode='HTML'
                )
            account_statuses[account_id] = status
        except FacebookRequestError as e:
            if getattr(e, "api_error_code", None) == 190:
                await context.bot.send_message(chat_id=CHAT_ID, text="‚ö† –¢–æ–∫–µ–Ω Facebook –Ω–µ–≤–∞–ª–∏–¥–µ–Ω (code 190). –û–±–Ω–æ–≤–∏—Ç–µ FB_ACCESS_TOKEN.", parse_mode='HTML')
            # –Ω–µ—Ç –ø—Ä–∞–≤/—É–¥–∞–ª–∏–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
        except Exception:
            continue

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now(timezone('Asia/Almaty')) - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, CHAT_ID, 'yesterday', label)

# ===== –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ—Ä–æ–≥–∞ —Å–ø–∏—Å–∞–Ω–∏–π =====
async def check_billing_forecast(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(timezone("Asia/Almaty")).date()
    try:
        with open(FORECAST_CACHE_FILE, "r") as f:
            cache = json.load(f)
    except Exception:
        cache = {}

    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id)
            info = acc.api_get(fields=["name", "spend_cap", "amount_spent"])
            spend_cap = float(info.get("spend_cap", 0)) / 100
            spent = float(info.get("amount_spent", 0)) / 100
            available = spend_cap - spent

            # —Å—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
            daily_budget = 0.0
            for c in acc.get_campaigns(fields=["name", "effective_status", "daily_budget"]):
                if c.get("effective_status") == "ACTIVE":
                    daily_budget += (int(c.get("daily_budget", 0)) / 100.0)

            if daily_budget <= 0 or spend_cap <= 0:
                continue

            days_left = ceil(max(0.0, available) / daily_budget)
            billing_date = today + timedelta(days=days_left)

            # —à–ª—ë–º –∑–∞ 3 –¥–Ω—è –¥–æ –¥–∞—Ç—ã
            if (billing_date - today).days == 3:
                if cache.get(acc_id) == billing_date.isoformat():
                    continue  # —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
                name = ACCOUNT_NAMES.get(acc_id, acc_id.replace("act_", ""))
                msg = (
                    f"‚ö†Ô∏è <b>{name}</b>\n\n"
                    f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: <b>{spend_cap:.2f} $</b>\n"
                    f"–î–∞—Ç–∞: <b>{billing_date.strftime('%d.%m.%Y')}</b>\n"
                    f"–î–æ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{available:.2f} $</b>\n"
                    f"–°—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: <b>{daily_budget:.2f} $</b>\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>"
                )
                await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
                cache[acc_id] = billing_date.isoformat()

        except FacebookRequestError as e:
            # —Ç–æ–∫–µ–Ω/–¥–æ—Å—Ç—É–ø ‚Äî –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º, —á—Ç–æ–±—ã –Ω–µ —à—É–º–µ—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
            continue
        except Exception:
            continue

    try:
        with open(FORECAST_CACHE_FILE, "w") as f:
            json.dump(cache, f)
    except Exception:
        pass

# ===== –•—ç–Ω–¥–ª–µ—Ä—ã =====
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∑–∞—â–∏—Ç–∞ –æ—Ç service updates, –≥–¥–µ –Ω–µ—Ç message.text
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip()
    if text == '–°–µ–≥–æ–¥–Ω—è':
        label = datetime.now().strftime('%d.%m.%Y')
        await send_report(context, update.message.chat_id, 'today', label)
    elif text == '–í—á–µ—Ä–∞':
        label = (datetime.now() - timedelta(days=1)).strftime('%d.%–º.%Y')
        await send_report(context, update.message.chat_id, 'yesterday', label)
    elif text == '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è':
        until = datetime.now() - timedelta(days=1)
        since = until - timedelta(days=6)
        period = {'since': since.strftime('%Y-%m-%d'), 'until': until.strftime('%Y-%m-%d')}
        label = f"{since.strftime('%d.%m')}-{until.strftime('%d.%m')}"
        await send_report(context, update.message.chat_id, period, label)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [['–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è']]
    await update.message.reply_text('ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:', reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

# ===== –ó–∞–ø—É—Å–∫ =====
app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤/–±–∏–ª–ª–∏–Ω–≥–∞
app.job_queue.run_repeating(check_billing, interval=600, first=10)
# –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤—á–µ—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è –≤ 09:30 (+5)
app.job_queue.run_daily(daily_report, time=time(hour=9, minute=30, tzinfo=timezone('Asia/Almaty')))
# –ø—Ä–æ–≥–Ω–æ–∑ —Å–ø–∏—Å–∞–Ω–∏–π –≤ 09:00 (+5)
app.job_queue.run_daily(check_billing_forecast, time=time(hour=9, minute=0, tzinfo=timezone('Asia/Almaty')))

if __name__ == "__main__":
    print("\U0001F680 –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)
