import asyncio
import re
import hashlib
import hmac
import schedule
import time
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.api import FacebookAdsApi
from telegram import Bot, Update
from telegram.ext import Application, CommandHandler, CallbackContext

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Facebook =====
ACCESS_TOKEN = "EAASZCrBwhoH0BO6hvTPZBtAX3OFPcJjZARZBZCIllnjc4GkxagyhvvrylPKWdU9jMijZA051BJRRvVuV1nab4k5jtVO5q0TsDIKbXzphumaFIbqKDcJ3JMvQTmORdrNezQPZBP14pq4NKB56wpIiNJSLFa5yXFsDttiZBgUHAmVAJknN7Ig1ZBVU2q0vRyQKJtyuXXwZDZD"
APP_ID = "1336645834088573"
APP_SECRET = "01bf23c5f726c59da318daa82dd0e9dc"
FacebookAdsApi.init(APP_ID, APP_SECRET, ACCESS_TOKEN)

# ===== –°–ø–∏—Å–æ–∫ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ =====
AD_ACCOUNTS = [
    "act_1206987573792913",
  "act_1415004142524014",
    "act_1333550570916716",
    "act_798205335840576",
    "act_844229314275496",
    "act_1108417930211002",
    "act_2342025859327675",
    "act_508239018969999",
    "act_1513759385846431",
    "act_1042955424178074"
    
]

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram =====
TELEGRAM_TOKEN = "8033028841:AAGp7856PuHCrAeIXYHGN2W6q83SsCWxxXI"
CHAT_ID = "253181449"
bot = Bot(token=TELEGRAM_TOKEN)

# ===== –û—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ =====
ALLOWED_ACTIONS = {"link_click"}

# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ =====
def clean_text(text):
    if not isinstance(text, str):
        return str(text)
    text = re.sub(r'([_\*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)
    return text

# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è appsecret_proof =====
def generate_appsecret_proof():
    return hmac.new(APP_SECRET.encode(), ACCESS_TOKEN.encode(), hashlib.sha256).hexdigest()

# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∫–ª–∞–º–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç =====
def is_account_active(account_id):
    try:
        account_data = AdAccount(account_id).api_get(fields=['account_status'])
        return "‚úÖ" if account_data['account_status'] == 1 else "üî¥"
    except Exception:
        return "üî¥"

# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—á–µ—Ä–∞ (–∞–≤—Ç–æ–æ—Ç—á—ë—Ç) =====
def get_facebook_data_yesterday(account_id):
    return get_facebook_data(account_id, "yesterday")

# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–ø–æ –∫–Ω–æ–ø–∫–µ) =====
def get_facebook_data_today(account_id):
    return get_facebook_data(account_id, "today")

# ===== –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö =====
def get_facebook_data(account_id, date_preset):
    account = AdAccount(account_id)
    fields = ['impressions', 'cpm', 'clicks', 'cpc', 'actions', 'cost_per_action_type', 'spend']
    params = {'date_preset': date_preset, 'level': 'account', 'appsecret_proof': generate_appsecret_proof()}

    try:
        campaigns = account.get_insights(fields=fields, params=params)
    except Exception as e:
        return f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {account_id}: {clean_text(str(e))}"

    try:
        account_name = account.api_get(fields=['name'])['name']
    except Exception:
        account_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç"

    status_emoji = is_account_active(account_id)
    report = f"{status_emoji} {clean_text(account_name)}\n"

    if not campaigns:
        report += "\n‚ö† –î–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç"
    else:
        for campaign in campaigns:
            report += f"\nüëÅ –ü–æ–∫–∞–∑—ã: {clean_text(campaign.get('impressions', '‚Äî'))}"
            report += f"\nüéØ CPM: {clean_text(str(round(float(campaign.get('cpm', 0)) / 100, 2)))} USD"
            report += f"\nüñ± –ö–ª–∏–∫–∏: {clean_text(campaign.get('clicks', '‚Äî'))}"
            report += f"\nüí∏ CPC: {clean_text(str(round(float(campaign.get('cpc', 0)), 2)))} USD"

            if 'cost_per_action_type' in campaign:
                for cost in campaign['cost_per_action_type']:
                    if cost['action_type'] in ALLOWED_ACTIONS:
                        report += f"\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–ª–∏–∫–∞: {clean_text(str(round(float(cost['value']), 2)))} USD"

            spend = campaign.get('spend', 0)
            report += f"\nüíµ –°—É–º–º–∞ –∑–∞—Ç—Ä–∞—Ç: {clean_text(str(round(float(spend), 2)))} USD"
    return report

# ===== –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á—ë—Ç–∞ –≤ Telegram =====
async def send_to_telegram(message):
    try:
        await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="MarkdownV2")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

# ===== –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á—ë—Ç–∞ =====
async def send_yesterday_report():
    for account_id in AD_ACCOUNTS:
        await send_to_telegram(get_facebook_data_yesterday(account_id))

# ===== –ó–∞–ø—É—Å–∫ –æ—Ç—á—ë—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –≤ –±–æ—Ç–µ =====
async def today_report(update: Update, context: CallbackContext):
    await update.message.reply_text("–°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
    for account_id in AD_ACCOUNTS:
        await send_to_telegram(get_facebook_data_today(account_id))

# ===== –ë–æ—Ç Telegram —Å –∫–æ–º–∞–Ω–¥–æ–π /today_report =====
app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("today_report", today_report))

async def start_telegram_bot():
    await app.run_polling()

# ===== –ó–∞–ø—É—Å–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é =====
def run_auto_report():
    asyncio.run(send_yesterday_report())

schedule.every().day.at("04:30").do(run_auto_report)  # –ê–≤—Ç–æ–æ—Ç—á—ë—Ç –≤ 9:30 –ø–æ —Ç–≤–æ–µ–º—É –≤—Ä–µ–º–µ–Ω–∏

# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–ª–ª–∏–Ω–≥–∞ –∏ –æ—Ç–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ =====
sent_warnings = set()

def check_billing_and_status():
    global sent_warnings
    problem_accounts = []

    for account_id in AD_ACCOUNTS:
        try:
            account = AdAccount(account_id)
            account_info = account.api_get(fields=['account_status', 'name', 'disable_reason'])
            account_name = account_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç')
            status = account_info.get('account_status', 0)
            disable_reason = account_info.get('disable_reason', None)

            if status != 1 or disable_reason:
                if account_id not in sent_warnings:
                    problem_accounts.append(f"üö® –ê–∫–∫–∞—É–Ω—Ç *{account_name}* –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–ª–∞—Ç–µ–∂–æ–º!")
                    sent_warnings.add(account_id)
            elif account_id in sent_warnings:
                problem_accounts.append(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç *{account_name}* —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω!")
                sent_warnings.remove(account_id)

        except Exception as e:
            problem_accounts.append(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {account_id}: {clean_text(str(e))}")

    if problem_accounts:
        asyncio.run(send_to_telegram("\n".join(problem_accounts)))

schedule.every(30).minutes.do(check_billing_and_status)

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é...")
    asyncio.run(start_telegram_bot())
    while True:
        schedule.run_pending()
        time.sleep(60)
