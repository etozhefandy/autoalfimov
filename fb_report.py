# fb_report.py
import asyncio
import json
import os
from math import ceil
from datetime import datetime, timedelta, time

import requests
from pytz import timezone
from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.api import FacebookAdsApi
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# ====== –ù–ê–°–¢–†–û–ô–ö–ò ======
ACCESS_TOKEN = "EAASZCrBwhoH0BO7xBXr2h2sGTzvWzUyViJjnrXIvmI5w3uRQOszdntxDiFYxXH4hrKTmZBaPKtuthKuNx3rexRev5zAkby2XbrM5UmwzRGz8a2Q4WBDKp3d1ZCZAAhZCeWFBObQayL4XPwrOFQUtuPcGP5XVYubaXjZCsNT467yKBg90O71oVPZCbI0FrWcZAZC4GtgZDZD"
APP_ID = "1336645834088573"
APP_SECRET = "01bf23c5f726c59da318daa82dd0e9dc"
TELEGRAM_TOKEN = "8033028841:AAGud3hSZdR8KQiOSaAcwfbkv8P0p-P3Dt4"
CHAT_ID = "-1002679045097"  # –≥—Ä—É–ø–ø–∞
FORECAST_CACHE_FILE = "forecast_cache.json"
FX_CACHE_FILE = "FX_CACHE.json"

FacebookAdsApi.init(APP_ID, APP_SECRET, ACCESS_TOKEN)

# ====== –°–ü–ò–°–û–ö –ê–ö–ö–ê–£–ù–¢–û–í (–ü–û–†–Ø–î–û–ö –û–¢–ß–Å–¢–ê) ======
AD_ACCOUNTS = [
    "act_1415004142524014",  # –ñ–° –ê—Å—Ç–∞–Ω–∞
    "act_719853653795521",   # –ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞
    "act_1206987573792913",  # –ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä
    "act_1108417930211002",  # –ñ–° –ê–∫—Ç–∞—É
    "act_2342025859327675",  # –ñ–° –ê—Ç—ã—Ä–∞—É
    "act_844229314275496",   # –ñ–° –ê–∫—Ç–æ–±–µ
    "act_1333550570916716",  # –ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)
    "act_195526110289107",   # –ñ–° –¢–∞—Ä–∞–∑
    "act_2145160982589338",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç
    "act_2183299115451405",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç 2 (—Ä—è–¥–æ–º —Å –®—ã–º–∫–µ–Ω—Ç)
    # --- –¥–∞–ª—å—à–µ –Ω–µ –ñ–° ---
    "act_2310940436006402",  # Teplo Almaty (–∫–∞–∫ –ñ–°)
    "act_1104357140269368",  # Teplo Tashkent (–∫–∞–∫ –ñ–°)
    "act_776865548258700",   # Shanghai (–∫–∞–∫ –ñ–°)
    "act_584782470655012",   # TM Group (–ñ–° + –ª–∏–¥—ã —Å–∞–π—Ç–∞)
    "act_353220323925035",   # Zirbak RA (–∫–∞–∫ –ñ–°)
    "act_508239018969999",   # –§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º)
    "act_1357165995492721",  # –ê—Ä–∏—è —Å—Ç–µ–ø–∏
    "act_798205335840576",   # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
]

# ‚Äú–ö–∞–∫ –≤ –ñ–°‚Äù = —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ + –Ω–∞—á–∞—Ç—ã–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å
MESSAGING_ACCOUNTS = {
    "act_1415004142524014",  # –ñ–° –ê—Å—Ç–∞–Ω–∞
    "act_719853653795521",   # –ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞
    "act_1206987573792913",  # –ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä
    "act_1108417930211002",  # –ñ–° –ê–∫—Ç–∞—É
    "act_2342025859327675",  # –ñ–° –ê—Ç—ã—Ä–∞—É
    "act_844229314275496",   # –ñ–° –ê–∫—Ç–æ–±–µ
    "act_1333550570916716",  # –ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)
    "act_195526110289107",   # –ñ–° –¢–∞—Ä–∞–∑
    "act_2145160982589338",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç
    "act_2183299115451405",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç 2
    # –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –ñ–°:
    "act_2310940436006402",  # Teplo Almaty
    "act_1104357140269368",  # Teplo Tashkent
    "act_776865548258700",   # Shanghai
    "act_353220323925035",   # Zirbak RA
    "act_584782470655012",   # TM Group (–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Ç–æ–∂–µ)
}

# –õ–∏–¥—ã —Å–∞–π—Ç–∞ + —Ü–µ–Ω–∞ –ª–∏–¥–∞ (–¥–æ–±–∞–≤–æ—á–Ω–æ –¥–ª—è TM Group, –∏ —Ç–∞–º, –≥–¥–µ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ)
LEAD_FORM_ACCOUNTS = {
    "act_584782470655012",   # TM Group
    # –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ—â—ë –≥–¥–µ-—Ç–æ –≤–∫–ª—é—á–∏—Ç—å –ª–∏–¥—ã —Å–∞–π—Ç–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞ act_...
}

ACCOUNT_NAMES = {
    "act_1415004142524014": "–ñ–° –ê—Å—Ç–∞–Ω–∞",
    "act_719853653795521": "–ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
    "act_1206987573792913": "–ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä",
    "act_1108417930211002": "–ñ–° –ê–∫—Ç–∞—É",
    "act_2342025859327675": "–ñ–° –ê—Ç—ã—Ä–∞—É",
    "act_844229314275496": "–ñ–° –ê–∫—Ç–æ–±–µ",
    "act_1333550570916716": "–ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)",
    "act_195526110289107": "–ñ–° –¢–∞—Ä–∞–∑",
    "act_2145160982589338": "–ñ–° –®—ã–º–∫–µ–Ω—Ç",
    "act_2183299115451405": "–ñ–° –®—ã–º–∫–µ–Ω—Ç 2",
    "act_2310940436006402": "Teplo Almaty",
    "act_1104357140269368": "Teplo Tashkent",
    "act_776865548258700":  "Shanghai",
    "act_584782470655012":  "TM Group",
    "act_353220323925035":  "Zirbak RA",
    "act_508239018969999":  "–§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç",
    "act_1357165995492721": "–ê—Ä–∏—è –°—Ç–µ–ø–∏",
    "act_798205335840576":  "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
}

# ====== –ì–õ–û–ë–ê–õ–¨–ù–´–ï ======
account_statuses = {}

# ====== –£–¢–ò–õ–ò–¢–´ ======
def format_number(num) -> str:
    try:
        return f"{int(float(num)):,}".replace(",", " ")
    except:
        return str(num)

def _exc_is_permission(e: Exception) -> bool:
    # –º—è–≥–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º 403/–ø—Ä–∞–≤ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç –Ω–µ—Ç ‚Äî –ø–æ —Ç–µ–∫—Å—Ç—É
    s = str(e).lower()
    return "(#200)" in s or "not grant ads_management" in s or "permissions" in s

def _get_usd_kzt() -> float:
    """
    –ö—É—Ä—Å USD‚ÜíKZT:
      1) –µ—Å–ª–∏ –∑–∞–¥–∞–Ω FX_KZT ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      2) –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–µ–∂–∏–π –∫—ç—à (<=6—á) ‚Äì –±–µ—Ä—ë–º –∏–∑ –∫—ç—à–∞
      3) –ø—Ä–æ–±—É–µ–º API exchangerate.host
      4) fallback = 495.0
    """
    # 1) —Ä—É—á–Ω–æ–π override
    env_rate = os.getenv("FX_KZT")
    if env_rate:
        try:
            return float(env_rate)
        except:
            pass

    # 2) –∫—ç—à
    try:
        with open(FX_CACHE_FILE, "r") as f:
            cached = json.load(f)
        ts = datetime.fromisoformat(cached["ts"])
        if datetime.utcnow() - ts <= timedelta(hours=6):
            return float(cached["rate"])
    except:
        pass

    # 3) API
    rate = 495.0  # fallback
    try:
        r = requests.get("https://api.exchangerate.host/latest", params={"base": "USD", "symbols": "KZT"}, timeout=8)
        if r.ok:
            data = r.json()
            rate = float(data["rates"]["KZT"])
    except:
        pass

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à
    try:
        with open(FX_CACHE_FILE, "w") as f:
            json.dump({"rate": rate, "ts": datetime.utcnow().isoformat()}, f)
    except:
        pass
    return rate

def is_account_active(account_id):
    try:
        status = AdAccount(account_id).api_get(fields=['account_status'])['account_status']
        return "üü¢" if status == 1 else "üî¥"
    except Exception as e:
        if _exc_is_permission(e):
            return "‚ö™"  # –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä
        return "üî¥"

# ====== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ======
def get_facebook_data(account_id, date_preset, date_label=''):
    account = AdAccount(account_id)
    fields = ['impressions', 'cpm', 'clicks', 'cpc', 'spend', 'actions']
    params = {'time_range': date_preset, 'level': 'account'} if isinstance(date_preset, dict) else {'date_preset': date_preset, 'level': 'account'}

    try:
        insights = account.get_insights(fields=fields, params=params)
        account_name = ACCOUNT_NAMES.get(account_id, account.api_get(fields=['name'])['name'])
    except Exception as e:
        if _exc_is_permission(e):
            return ""  # –Ω–µ—Ç –ø—Ä–∞–≤ ‚Äî –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return f"‚ö† –û—à–∏–±–∫–∞: {str(e)}"

    if not insights:
        date_info = f" ({date_label})" if date_label else ""
        return f"{is_account_active(account_id)} <b>{account_name}</b>{date_info}\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    insight = insights[0]
    date_info = f" ({date_label})" if date_label else ""
    report = f"{is_account_active(account_id)} <b>{account_name}</b>{date_info}\n"
    report += (
        f"üëÅ –ü–æ–∫–∞–∑—ã: {format_number(insight.get('impressions', '0'))}\n"
        f"üéØ CPM: {round(float(insight.get('cpm', 0)), 2)} $\n"
        f"üñ± –ö–ª–∏–∫–∏: {format_number(insight.get('clicks', '0'))}\n"
        f"üí∏ CPC: {round(float(insight.get('cpc', 0)), 2)} $\n"
        f"üíµ –ó–∞—Ç—Ä–∞—Ç—ã: {round(float(insight.get('spend', 0)), 2)} $"
    )

    actions = {a['action_type']: float(a['value']) for a in insight.get('actions', [])}

    # –ü–µ—Ä–µ–ø–∏—Å–∫–∏
    if account_id in MESSAGING_ACCOUNTS:
        conv = actions.get('onsite_conversion.messaging_conversation_started_7d', 0)
        report += f"\n‚úâÔ∏è –ù–∞—á–∞—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞: {int(conv)}"
        if conv > 0:
            report += f"\nüí¨üí≤ –¶–µ–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏: {round(float(insight.get('spend', 0)) / conv, 2)} $"

    # –õ–∏–¥—ã —Å–∞–π—Ç–∞ (–¥–ª—è TM Group –∏ –¥—Ä., –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–º)
    if account_id in LEAD_FORM_ACCOUNTS:
        leads = (
            actions.get('offsite_conversion.fb_pixel_submit_application', 0)
            or actions.get('offsite_conversion.fb_pixel_lead', 0)
            or actions.get('lead', 0)
        )
        report += f"\nüì© –ó–∞—è–≤–∫–∏: {int(leads)}"
        if leads > 0:
            report += f"\nüì©üí≤ –¶–µ–Ω–∞ –∑–∞—è–≤–∫–∏: {round(float(insight.get('spend', 0)) / leads, 2)} $"

    return report

async def send_report(context, chat_id, period, date_label=''):
    for acc in AD_ACCOUNTS:
        msg = get_facebook_data(acc, period, date_label)
        if msg:  # –ø—É—Å—Ç—ã–µ (–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞) –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='HTML')

async def check_billing(context: ContextTypes.DEFAULT_TYPE):
    # –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–ø–∞–ª (–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø)
    global account_statuses
    for account_id in AD_ACCOUNTS:
        try:
            account = AdAccount(account_id)
            info = account.api_get(fields=['name', 'account_status', 'balance'])
            status = info.get('account_status')
            if account_id in account_statuses and account_statuses[account_id] == 1 and status != 1:
                name = ACCOUNT_NAMES.get(account_id, info.get('name'))
                balance = float(info.get('balance', 0)) / 100
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è –ê—Ö—Ç—É–Ω–≥! {name}! —É –Ω–∞—Å –±–∏–ª–ª–∏–Ω–≥ - {balance:.2f} $",
                    parse_mode='HTML'
                )
            account_statuses[account_id] = status
        except Exception as e:
            if _exc_is_permission(e):
                continue
            # —Ç–∏—Ö–∞—è –æ—à–∏–±–∫–∞ ‚Äî –Ω–µ —Å–ø–∞–º–∏–º

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now(timezone('Asia/Almaty')) - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, CHAT_ID, 'yesterday', label)
    # –ø–æ—Å–ª–µ –æ—Ç—á—ë—Ç–∞ ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –±–∏–ª–ª–∏–Ω–≥–æ–≤
    await cmd_billing_common(context, CHAT_ID)

# ====== –ë–ò–õ–õ–ò–ù–ì-–°–ü–ò–°–û–ö (–¢–û–õ–¨–ö–û –ù–ï–ê–ö–¢–ò–í–ù–´–ï) ======
async def cmd_billing_common(context: ContextTypes.DEFAULT_TYPE, chat_id: str | int):
    rate = _get_usd_kzt()
    lines = []
    for account_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(account_id).api_get(fields=['name', 'account_status', 'balance'])
            status = acc.get('account_status')
            if status == 1:
                continue  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ù–ï–∞–∫—Ç–∏–≤–Ω—ã–µ
            name = ACCOUNT_NAMES.get(account_id, acc.get('name', account_id))
            usd = float(acc.get('balance', 0)) / 100
            kzt = round(usd * rate)
            lines.append(f"üî¥ <b>{name}</b>\n   üíµ {usd:.2f} $  |  üá∞üáø {kzt:,} ‚Ç∏ (1$ = {rate:.2f} ‚Ç∏)")
        except Exception as e:
            if _exc_is_permission(e):
                continue
            # –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue

    if not lines:
        text = "‚úÖ –í—Å–µ –∫–∞–±–∏–Ω–µ—Ç—ã –∞–∫—Ç–∏–≤–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    else:
        text = "–°–µ–π—á–∞—Å –≤ –±–∏–ª–ª–∏–Ω–≥–∞—Ö (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ):\n\n" + "\n\n".join(lines)

    await context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')

# ====== –ü–†–û–ì–ù–û–ó –ë–ò–õ–õ–ò–ù–ì–ê (–æ—Å—Ç–∞–≤–ª—è–µ–º, –∫–∞–∫ –±—ã–ª–æ) ======
async def check_billing_forecast(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(timezone("Asia/Almaty")).date()
    try:
        with open(FORECAST_CACHE_FILE, "r") as f:
            cache = json.load(f)
    except:
        cache = {}

    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id)
            info = acc.api_get(fields=["name", "spend_cap", "amount_spent"])
            spend_cap = float(info.get("spend_cap", 0)) / 100
            spent = float(info.get("amount_spent", 0)) / 100
            available = spend_cap - spent
            daily_budget = sum(
                int(c.get("daily_budget", 0)) / 100
                for c in acc.get_campaigns(fields=["name", "effective_status", "daily_budget"])
                if c.get("effective_status") == "ACTIVE"
            )
            if daily_budget <= 0:
                continue
            days_left = ceil(available / daily_budget)
            billing_date = today + timedelta(days=days_left)
            if (billing_date - today).days == 3:
                if cache.get(acc_id) == billing_date.isoformat():
                    continue
                name = ACCOUNT_NAMES.get(acc_id, info.get("name", acc_id))
                msg = (
                    f"‚ö†Ô∏è <b>{name}</b>\n\n"
                    f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: <b>{spend_cap:.2f} $</b>\n"
                    f"–î–∞—Ç–∞: <b>{billing_date.strftime('%d.%m.%Y')}</b>\n"
                    f"–î–æ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{available:.2f} $</b>\n"
                    f"–°—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: <b>{daily_budget:.2f} $</b>\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>"
                )
                await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
                cache[acc_id] = billing_date.isoformat()
        except Exception as e:
            if _exc_is_permission(e):
                continue
            # –ø—Ä–æ—á–∏–µ –æ—à–∏–±–∫–∏ ‚Äî —Ç–∏—Ö–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    with open(FORECAST_CACHE_FILE, "w") as f:
        json.dump(cache, f)

# ====== –•–ï–ù–î–õ–ï–†–´ ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî inline-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if update.effective_chat and update.effective_chat.type in ("group", "supergroup"):
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today"),
             InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="yesterday")],
            [InlineKeyboardButton("–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è", callback_data="lastweek")],
            [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤", callback_data="billing")],
        ])
        await update.message.reply_text("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:", reply_markup=kb)
    else:
        # –≤ –ª–∏—á–∫–µ ‚Äî –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [['–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è', '–°–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤']]
        await update.message.reply_text('ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:', reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/billing ‚Äî —Å–ø–∏—Å–æ–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —Å —Å—É–º–º–∞–º–∏ ($ –∏ ‚Ç∏)\n"
        "/today ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/yesterday ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –≤—á–µ—Ä–∞\n"
        "/lastweek ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é\n"
    )
    await update.message.reply_text(text)

async def cmd_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    label = datetime.now().strftime('%d.%m.%Y')
    await send_report(context, update.effective_chat.id, 'today', label)

async def cmd_yesterday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, update.effective_chat.id, 'yesterday', label)

async def cmd_lastweek(update: Update, context: ContextTypes.DEFAULT_TYPE):
    until = datetime.now() - timedelta(days=1)
    since = until - timedelta(days=6)
    period = {'since': since.strftime('%Y-%m-%d'), 'until': until.strftime('%Y-%m-%d')}
    label = f"{since.strftime('%d.%m')}-{until.strftime('%d.%m')}"
    await send_report(context, update.effective_chat.id, period, label)

async def cmd_billing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cmd_billing_common(context, update.effective_chat.id)

async def text_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().lower()
    if text == '—Å–µ–≥–æ–¥–Ω—è':
        await cmd_today(update, context)
    elif text == '–≤—á–µ—Ä–∞':
        await cmd_yesterday(update, context)
    elif text == '–ø—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è':
        await cmd_lastweek(update, context)
    elif text == '—Å–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤':
        await cmd_billing(update, context)

async def on_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    await q.answer()
    data = q.data
    dummy_update = Update(update.update_id, message=q.message)
    if data == "today":
        await cmd_today(dummy_update, context)
    elif data == "yesterday":
        await cmd_yesterday(dummy_update, context)
    elif data == "lastweek":
        await cmd_lastweek(dummy_update, context)
    elif data == "billing":
        await cmd_billing_common(context, q.message.chat.id)

# ====== APP ======
app = Application.builder().token(TELEGRAM_TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_cmd))
app.add_handler(CommandHandler("billing", cmd_billing))
app.add_handler(CommandHandler("today", cmd_today))
app.add_handler(CommandHandler("yesterday", cmd_yesterday))
app.add_handler(CommandHandler("lastweek", cmd_lastweek))
app.add_handler(CallbackQueryHandler(on_callback))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_buttons))

# —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
app.job_queue.run_repeating(check_billing, interval=600, first=10)
app.job_queue.run_daily(daily_report, time=time(hour=9, minute=30, tzinfo=timezone('Asia/Almaty')))
app.job_queue.run_daily(check_billing_forecast, time=time(hour=9, minute=0, tzinfo=timezone('Asia/Almaty')))

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)
