import asyncio
import json
import re
from math import ceil
from datetime import datetime, timedelta, time
from pytz import timezone

import requests  # ‚¨ÖÔ∏è –¥–ª—è –∞–≤—Ç–æ–∫—É—Ä—Å–∞ USD‚ÜíKZT

from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.api import FacebookAdsApi

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)

# ====== –¢–≤–æ–∏ –∫—Ä–µ–¥—ã (–∫–∞–∫ –±—ã–ª–æ) ======
ACCESS_TOKEN = "EAASZCrBwhoH0BO7xBXr2h2sGTzvWzUyViJjnrXIvmI5w3uRQOszdntxDiFYxXH4hrKTmZBaPKtuthKuNx3rexRev5zAkby2XbrM5UmwzRGz8a2Q4WBDKp3d1ZCZAAhZCeWFBObQayL4XPwrOFQUtuPcGP5XVYubaXjZCsNT467yKBg90O71oVPZCbI0FrWcZAZC4GtgZDZD"
APP_ID = "1336645834088573"
APP_SECRET = "01bf23c5f726c59da318daa82dd0e9dc"
FacebookAdsApi.init(APP_ID, APP_SECRET, ACCESS_TOKEN)

# ====== –ù–∞–±–æ—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (–∫–∞–∫ –±—ã–ª–æ) ======
AD_ACCOUNTS = [
    "act_1415004142524014", "act_719853653795521", "act_1206987573792913", "act_1108417930211002",
    "act_2342025859327675", "act_844229314275496", "act_1333550570916716", "act_195526110289107",
    "act_2145160982589338", "act_1042955424178074", "act_4030694587199998", "act_508239018969999",
    "act_1357165995492721", "act_798205335840576"
]

MESSAGING_ACCOUNTS = {
    "act_1415004142524014", "act_1108417930211002", "act_2342025859327675", "act_1333550570916716",
    "act_844229314275496", "act_1206987573792913", "act_195526110289107", "act_2145160982589338",
    "act_719853653795521"
}

LEAD_FORM_ACCOUNTS = {
    "act_1042955424178074", "act_4030694587199998", "act_798205335840576"
}

ACCOUNT_NAMES = {
    "act_1415004142524014": "–ñ–° –ê—Å—Ç–∞–Ω–∞", "act_719853653795521": "–ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
    "act_1206987573792913": "–ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä", "act_1108417930211002": "–ñ–° –ê–∫—Ç–∞—É",
    "act_2342025859327675": "–ñ–° –ê—Ç—ã—Ä–∞—É", "act_844229314275496": "–ñ–° –ê–∫—Ç–æ–±–µ",
    "act_1333550570916716": "–ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)", "act_195526110289107": "–ñ–° –¢–∞—Ä–∞–∑",
    "act_2145160982589338": "–ñ–° –®—ã–º–∫–µ–Ω—Ç", "act_1042955424178074": "–∫–µ–Ω—Å–µ 1",
    "act_4030694587199998": "–∫–µ–Ω—Å–µ 2", "act_508239018969999": "–§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç",
    "act_1357165995492721": "–ê—Ä–∏—è –°—Ç–µ–ø–∏", "act_798205335840576": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
}

TELEGRAM_TOKEN = "8033028841:AAGud3hSZdR8KQiOSaAcwfbkv8P0p-P3Dt4"
CHAT_ID = "-1002679045097"  # —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞
FORECAST_CACHE_FILE = "forecast_cache.json"
FX_CACHE_FILE = "fx_cache.json"

account_statuses = {}

# ========= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï =========

def is_account_active(account_id):
    try:
        status = AdAccount(account_id).api_get(fields=['account_status'])['account_status']
        return "üü¢" if status == 1 else "üî¥"
    except:
        return "üî¥"

def format_number(num):
    return f"{int(float(num)):,}".replace(",", " ")

def get_usd_kzt_rate(spread_tenge: float = 5.0) -> float:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å USD‚ÜíKZT (exchangerate.host), –∫—ç—à ~6—á, +5‚Ç∏ —Å–≤–µ—Ä—Ö—É.
    –§–æ–ª–±–µ–∫–∏: –∫—ç—à -> –¥–µ—Ñ–æ–ª—Ç 490.
    """
    now = datetime.utcnow()
    try:
        with open(FX_CACHE_FILE, "r") as f:
            fx = json.load(f)
        ts = datetime.fromisoformat(fx.get("ts"))
        if (now - ts) < timedelta(hours=6) and fx.get("usd_kzt"):
            return float(fx["usd_kzt"]) + spread_tenge
    except Exception:
        pass

    try:
        resp = requests.get(
            "https://api.exchangerate.host/latest",
            params={"base": "USD", "symbols": "KZT"},
            timeout=10,
        )
        resp.raise_for_status()
        rate = float(resp.json()["rates"]["KZT"])
        with open(FX_CACHE_FILE, "w") as f:
            json.dump({"ts": now.isoformat(), "usd_kzt": rate}, f)
        return rate + spread_tenge
    except Exception:
        try:
            with open(FX_CACHE_FILE, "r") as f:
                fx = json.load(f)
            return float(fx["usd_kzt"]) + spread_tenge
        except Exception:
            return 490.0 + spread_tenge

# ========= –û–°–ù–û–í–ù–û–ô –û–¢–ß–Å–¢ =========

def get_facebook_data(account_id, date_preset, date_label=''):
    account = AdAccount(account_id)
    fields = ['impressions', 'cpm', 'clicks', 'cpc', 'spend', 'actions']
    params = {'time_range': date_preset, 'level': 'account'} if isinstance(date_preset, dict) else {'date_preset': date_preset, 'level': 'account'}
    try:
        insights = account.get_insights(fields=fields, params=params)
        account_name = account.api_get(fields=['name'])['name']
    except Exception as e:
        # üîá –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —à–ª—ë–º –ø–æ —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
        err = str(e)
        if "(#200)" in err or "code\": 200" in err or "403" in err:
            return None
        return (
            "‚ö† <b>–û—à–∏–±–∫–∞:</b>\n\n"
            f"<pre>Message: {e}</pre>"
        )

    date_info = f" ({date_label})" if date_label else ""
    header = f"{is_account_active(account_id)} <b>{account_name}</b>{date_info}\n"

    if not insights:
        return header + "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    insight = insights[0]
    core = (
        f"üëÅ –ü–æ–∫–∞–∑—ã: <b>{format_number(insight.get('impressions', '0'))}</b>\n"
        f"üéØ CPM: <b>{round(float(insight.get('cpm', 0)), 2)} $</b>\n"
        f"üñ± –ö–ª–∏–∫–∏: <b>{format_number(insight.get('clicks', '0'))}</b>\n"
        f"üí∏ CPC: <b>{round(float(insight.get('cpc', 0)), 2)} $</b>\n"
        f"üíµ –ó–∞—Ç—Ä–∞—Ç—ã: <b>{round(float(insight.get('spend', 0)), 2)} $</b>"
    )

    actions = {a['action_type']: float(a['value']) for a in insight.get('actions', [])}

    extra_parts = []

    if account_id in MESSAGING_ACCOUNTS:
        conv = actions.get('onsite_conversion.messaging_conversation_started_7d', 0)
        line = f"‚úâÔ∏è –ù–∞—á–∞—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞: <b>{int(conv)}</b>"
        if conv > 0:
            line += f"\nüí¨üí≤ –¶–µ–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏: <b>{round(float(insight.get('spend', 0)) / conv, 2)} $</b>"
        extra_parts.append(line)

    if account_id in LEAD_FORM_ACCOUNTS:
        if account_id == 'act_4030694587199998':
            leads = actions.get('Website Submit Applications', 0)
        else:
            leads = (
                actions.get('offsite_conversion.fb_pixel_submit_application', 0) or
                actions.get('offsite_conversion.fb_pixel_lead', 0) or
                actions.get('lead', 0)
            )
        line = f"üì© –ó–∞—è–≤–∫–∏: <b>{int(leads)}</b>"
        if leads > 0:
            line += f"\nüì©üí≤ –¶–µ–Ω–∞ –∑–∞—è–≤–∫–∏: <b>{round(float(insight.get('spend', 0)) / leads, 2)} $</b>"
        extra_parts.append(line)

    tail = ("\n" + "\n".join(extra_parts)) if extra_parts else ""
    return header + core + tail

async def send_report(context, chat_id, period, date_label=''):
    for acc in AD_ACCOUNTS:
        msg = get_facebook_data(acc, period, date_label)
        if msg:
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='HTML')

# ========= –ë–ò–õ–õ–ò–ù–ì–ò =========

async def check_billing(context: ContextTypes.DEFAULT_TYPE):
    global account_statuses
    for account_id in AD_ACCOUNTS:
        try:
            account = AdAccount(account_id)
            info = account.api_get(fields=['name', 'account_status', 'balance'])
            status = info.get('account_status')
            if account_id in account_statuses and account_statuses[account_id] == 1 and status != 1:
                name = info.get('name')
                balance = float(info.get('balance', 0)) / 100
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è <b>–ê—Ö—Ç—É–Ω–≥!</b> {name}\n–ë–∏–ª–ª–∏–Ω–≥: <b>{balance:.2f} $</b>",
                    parse_mode='HTML'
                )
            account_statuses[account_id] = status
        except Exception as e:
            # –∏–≥–Ω–æ—Ä–∏–º 403/–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            err = str(e)
            if "(#200)" in err or "code\": 200" in err or "403" in err:
                continue
            await context.bot.send_message(chat_id=CHAT_ID, text=f"‚ö† –û—à–∏–±–∫–∞: {e}", parse_mode='HTML')

async def send_billing_list(context: ContextTypes.DEFAULT_TYPE, chat_id: str):
    """
    –ü–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç: –∏–º—è, $ –∏ ‚Ç∏ (–ø–æ –∞–≤—Ç–æ–∫—É—Ä—Å—É +5‚Ç∏).
    """
    usd_kzt = get_usd_kzt_rate(spread_tenge=5.0)
    rate_str = f"{usd_kzt:.2f} ‚Ç∏"

    for account_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(account_id)
            info = acc.api_get(fields=['name', 'account_status', 'balance'])
            name = info.get('name', ACCOUNT_NAMES.get(account_id, account_id))
            status = info.get('account_status', 0)
            balance_usd = float(info.get('balance', 0)) / 100.0
            balance_kzt = round(balance_usd * usd_kzt, 2)
            mark = "üü¢" if status == 1 else "üî¥"

            msg = (
                f"{mark} <b>{name}</b>\n"
                f"üíµ <b>{balance_usd:.2f} $</b>  |  üá∞üáø <b>{balance_kzt:.2f} ‚Ç∏</b>\n"
                f"<i>–ö—É—Ä—Å: 1 $ = {rate_str}</i>"
            )
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode="HTML")
        except Exception as e:
            # –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏–º –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞
            err = str(e)
            if "(#200)" in err or "code\": 200" in err or "403" in err:
                continue
            # –∏–Ω–∞—á–µ –º–æ–∂–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å
            # await context.bot.send_message(chat_id=chat_id, text=f"‚ö† –û—à–∏–±–∫–∞ –ø–æ {account_id}: {e}")
            continue

# ========= –ü–†–û–ì–ù–û–ó –ë–ò–õ–õ–ò–ù–ì–ê (–∫–∞–∫ –±—ã–ª–æ) =========

async def check_billing_forecast(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(timezone("Asia/Almaty")).date()
    try:
        with open(FORECAST_CACHE_FILE, "r") as f:
            cache = json.load(f)
    except:
        cache = {}

    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id)
            info = acc.api_get(fields=["name", "spend_cap", "amount_spent"])
            spend_cap = float(info.get("spend_cap", 0)) / 100
            spent = float(info.get("amount_spent", 0)) / 100
            available = spend_cap - spent
            daily_budget = sum(
                int(c.get("daily_budget", 0)) / 100
                for c in acc.get_campaigns(fields=["name", "effective_status", "daily_budget"])
                if c.get("effective_status") == "ACTIVE"
            )
            if daily_budget == 0:
                continue
            days_left = ceil(available / daily_budget)
            billing_date = today + timedelta(days=days_left)
            if (billing_date - today).days == 3:
                if cache.get(acc_id) == billing_date.isoformat():
                    continue
                name = ACCOUNT_NAMES.get(acc_id, acc_id)
                msg = (
                    f"‚ö†Ô∏è <b>{name}</b>\n\n"
                    f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: <b>{spend_cap:.2f} $</b>\n"
                    f"–î–∞—Ç–∞: <b>{billing_date.strftime('%d.%m.%Y')}</b>\n"
                    f"–î–æ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{available:.2f} $</b>\n"
                    f"–°—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: <b>{daily_budget:.2f} $</b>\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>"
                )
                await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
                cache[acc_id] = billing_date.isoformat()
        except Exception as e:
            # —Ç–∏—Ö–∏–π –ª–æ–≥
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ {acc_id}: {e}")

    with open(FORECAST_CACHE_FILE, "w") as f:
        json.dump(cache, f)

# ========= –ü–õ–ê–ù–û–í–´–ï –î–ñ–û–ë–´ =========

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now(timezone('Asia/Almaty')) - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, CHAT_ID, 'yesterday', label)
    # –°–ª–µ–¥–æ–º ‚Äî —Å–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å –∞–≤—Ç–æ–∫—É—Ä—Å–æ–º)
    await send_billing_list(context, CHAT_ID)

# ========= –•–≠–ù–î–õ–ï–†–´ –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö =========

async def cmd_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    label = datetime.now().strftime('%d.%m.%Y')
    await send_report(context, update.effective_chat.id, 'today', label)

async def cmd_yesterday(update: Update, context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, update.effective_chat.id, 'yesterday', label)

async def cmd_week(update: Update, context: ContextTypes.DEFAULT_TYPE):
    until = datetime.now() - timedelta(days=1)
    since = until - timedelta(days=6)
    period = {'since': since.strftime('%Y-%m-%d'), 'until': until.strftime('%Y-%m-%d')}
    label = f"{since.strftime('%d.%m')}-{until.strftime('%d.%m')}"
    await send_report(context, update.effective_chat.id, period, label)

async def cmd_billing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_billing_list(context, update.effective_chat.id)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üÜò <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã</b>\n\n"
        "‚Ä¢ <code>/today</code> ‚Äî –æ—Ç—á—ë—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <code>/yesterday</code> ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –≤—á–µ—Ä–∞\n"
        "‚Ä¢ <code>/week</code> ‚Äî –æ—Ç—á—ë—Ç –∑–∞ –ø—Ä–æ—à–µ–¥—à—É—é –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ <code>/billing</code> ‚Äî —Å–ø–∏—Å–æ–∫ –±–∏–ª–ª–∏–Ω–≥–æ–≤ –ø–æ –∞–∫–∫–∞—É–Ω—Ç–∞–º (–≤ $ –∏ ‚Ç∏)\n\n"
        "–í –≥—Ä—É–ø–ø–∞—Ö –¥–æ—Å—Ç—É–ø–Ω—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º /start."
    )
    await update.message.reply_text(text, parse_mode="HTML")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ò–Ω–ª–∞–π–Ω –¥–ª—è –≥—Ä—É–ø–ø
    ikb = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today"),
            InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="yesterday"),
        ],
        [
            InlineKeyboardButton("–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è", callback_data="week"),
        ],
        [
            InlineKeyboardButton("–ë–∏–ª–ª–∏–Ω–≥", callback_data="billing_list"),
        ],
    ])
    # –†–µ–ø–ª–∞–π –¥–ª—è –ª–∏—á–∫–∏ (–æ—Å—Ç–∞–≤–∏–º –∏ –µ–≥–æ)
    rkb = ReplyKeyboardMarkup([['–°–µ–≥–æ–¥–Ω—è', '–í—á–µ—Ä–∞', '–ü—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è']], resize_keyboard=True)

    if update.effective_chat.type in ("group", "supergroup"):
        await update.message.reply_text("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:", reply_markup=ikb)
    else:
        await update.message.reply_text("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:", reply_markup=rkb)

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data

    if data == "today":
        await cmd_today(update, context)
    elif data == "yesterday":
        await cmd_yesterday(update, context)
    elif data == "week":
        await cmd_week(update, context)
    elif data == "billing_list":
        await send_billing_list(context, q.message.chat_id)

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Å—Ç–∞—Ä–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫-—Ä–µ–ø–ª–∞–µ–≤ –≤ –ª–∏—á–∫–µ
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip().lower()
    if text == '—Å–µ–≥–æ–¥–Ω—è':
        await cmd_today(update, context)
    elif text == '–≤—á–µ—Ä–∞':
        await cmd_yesterday(update, context)
    elif text == '–ø—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è':
        await cmd_week(update, context)

# ========= APP =========

app = Application.builder().token(TELEGRAM_TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", cmd_help))
app.add_handler(CommandHandler("today", cmd_today))
app.add_handler(CommandHandler("yesterday", cmd_yesterday))
app.add_handler(CommandHandler("week", cmd_week))
app.add_handler(CommandHandler("billing", cmd_billing))
app.add_handler(CallbackQueryHandler(on_button))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

# –¥–∂–æ–±—ã –∫–∞–∫ –±—ã–ª–∏
app.job_queue.run_repeating(check_billing, interval=600, first=10)
app.job_queue.run_daily(daily_report, time=time(hour=9, minute=30, tzinfo=timezone('Asia/Almaty')))
app.job_queue.run_daily(check_billing_forecast, time=time(hour=9, minute=0, tzinfo=timezone('Asia/Almaty')))

if __name__ == "__main__":
    print("\U0001F680 –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)
