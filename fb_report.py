import asyncio
import json
import math
import os
import time
from math import ceil
from datetime import datetime, timedelta, time as dtime
from pytz import timezone
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError

from facebook_business.adobjects.adaccount import AdAccount
from facebook_business.api import FacebookAdsApi

from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò FB =====================
ACCESS_TOKEN = "EAASZCrBwhoH0BO7xBXr2h2sGTzvWzUyViJjnrXIvmI5w3uRQOszdntxDiFYxXH4hrKTmZBaPKtuthKuNx3rexRev5zAkby2XbrM5UmwzRGz8a2Q4WBDKp3d1ZCZAAhZCeWFBObQayL4XPwrOFQUtuPcGP5XVYubaXjZCsNT467yKBg90O71oVPZCbI0FrWcZAZC4GtgZDZD"
APP_ID = "1336645834088573"
APP_SECRET = "01bf23c5f726c59da318daa82dd0e9dc"
FacebookAdsApi.init(APP_ID, APP_SECRET, ACCESS_TOKEN)

# ===================== –ê–ö–ö–ê–£–ù–¢–´ –í –û–¢–ß–Å–¢–ï (–ø–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω) =====================
AD_ACCOUNTS = [
    "act_1415004142524014",  # –ñ–° –ê—Å—Ç–∞–Ω–∞
    "act_719853653795521",   # –ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞
    "act_1206987573792913",  # –ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä
    "act_1108417930211002",  # –ñ–° –ê–∫—Ç–∞—É
    "act_2342025859327675",  # –ñ–° –ê—Ç—ã—Ä–∞—É
    "act_844229314275496",   # –ñ–° –ê–∫—Ç–æ–±–µ
    "act_1333550570916716",  # –ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)
    "act_195526110289107",   # –ñ–° –¢–∞—Ä–∞–∑
    "act_2145160982589338",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç
    "act_2183299115451405",  # –ñ–° –®—ã–º–∫–µ–Ω—Ç 2 (—Ä—è–¥–æ–º —Å –ø–µ—Ä–≤—ã–º)
    "act_2310940436006402",  # Teplo Almaty
    "act_776865548258700",   # Shanghai Tashkent
    "act_1104357140269368",  # Teplo Tashkent
    "act_584782470655012",   # TM Group
    "act_353220323925035",   # Zibak.tj
    "act_508239018969999",   # –§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç
    "act_1357165995492721",  # –ê—Ä–∏—è —Å—Ç–µ–ø–∏
    "act_798205335840576",   # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
]

# –≥–¥–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å "–ù–∞—á–∞—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞" –∏ –µ—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å
MESSAGING_ACCOUNTS = {
    # –í—Å–µ –ñ–°
    "act_1415004142524014",
    "act_719853653795521",
    "act_1206987573792913",
    "act_1108417930211002",
    "act_2342025859327675",
    "act_844229314275496",
    "act_1333550570916716",
    "act_195526110289107",
    "act_2145160982589338",
    "act_2183299115451405",
    # ¬´–∫–∞–∫ —É –ñ–°¬ª:
    "act_2310940436006402",  # Teplo Almaty
    "act_776865548258700",   # Shanghai Tashkent
    "act_1104357140269368",  # Teplo Tashkent
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:
    "act_353220323925035",   # Zibak.tj
    "act_584782470655012",   # TM Group (–∏ –ø–µ—Ä–µ–ø–∏—Å–∫–∏, –∏ –ª–∏–¥—ã)
}

# –≥–¥–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏–¥—ã —Å —Å–∞–π—Ç–∞ (–∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å)
LEAD_WEBSITE_ACCOUNTS = {
    "act_584782470655012",   # TM Group
    "act_798205335840576",   # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏–º –¥—Ä—É–≥–∏–µ
}

ACCOUNT_NAMES = {
    "act_1415004142524014": "–ñ–° –ê—Å—Ç–∞–Ω–∞",
    "act_719853653795521": "–ñ–° –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
    "act_1206987573792913": "–ñ–° –ü–∞–≤–ª–æ–¥–∞—Ä",
    "act_1108417930211002": "–ñ–° –ê–∫—Ç–∞—É",
    "act_2342025859327675": "–ñ–° –ê—Ç—ã—Ä–∞—É",
    "act_844229314275496": "–ñ–° –ê–∫—Ç–æ–±–µ",
    "act_1333550570916716": "–ñ–° –Æ–≥ (–ê–ª–º–∞—Ç—ã)",
    "act_195526110289107": "–ñ–° –¢–∞—Ä–∞–∑",
    "act_2145160982589338": "–ñ–° –®—ã–º–∫–µ–Ω—Ç",
    "act_2183299115451405": "–ñ–° –®—ã–º–∫–µ–Ω—Ç 2",
    "act_2310940436006402": "Teplo Almaty",
    "act_776865548258700": "Shanghai Tashkent",
    "act_1104357140269368": "Teplo Tashkent",
    "act_584782470655012": "TM Group",
    "act_353220323925035": "Zibak.tj",
    "act_508239018969999": "–§–∏—Ç–Ω–µ—Å –ü–æ–∏–Ω—Ç",
    "act_1357165995492721": "–ê—Ä–∏—è —Å—Ç–µ–ø–∏",
    "act_798205335840576": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏",
}

# ===================== –¢–ï–õ–ï–ì–†–ê–ú =====================
TELEGRAM_TOKEN = "8033028841:AAGud3hSZdR8KQiOSaAcwfbkv8P0p-P3Dt4"
CHAT_ID = "-1002679045097"  # –≥—Ä—É–ø–ø–∞
ALMATY_TZ = timezone('Asia/Almaty')

# ===================== FX (–∫—É—Ä—Å USD‚ÜíKZT) =====================
FX_CACHE_FILE = "fx_cache.json"
FX_CACHE_TTL = 60 * 60 * 12  # 12 —á–∞—Å–æ–≤
FX_BUMP_KZT = 5.0  # –Ω–∞–¥–±–∞–≤–∫–∞

def _load_fx_cache():
    try:
        with open(FX_CACHE_FILE, "r") as f:
            return json.load(f)
    except:
        return {}

def _save_fx_cache(cache: dict):
    with open(FX_CACHE_FILE, "w") as f:
        json.dump(cache, f)

def get_usd_to_kzt():
    cache = _load_fx_cache()
    now = int(time.time())
    if "rate" in cache and "ts" in cache and now - cache["ts"] < FX_CACHE_TTL:
        return float(cache["rate"]) + FX_BUMP_KZT

    url = "https://api.apilayer.com/fixer/latest?base=USD&symbols=KZT"
    req = Request(url, headers={"apikey": "LYr6odX08iC6PXKqQSTT4QtKouCFcWeF"})
    try:
        with urlopen(req, timeout=10) as resp:
            data = json.loads(resp.read().decode("utf-8"))
            raw = float(data["rates"]["KZT"])
            _save_fx_cache({"rate": raw, "ts": now})
            return raw + FX_BUMP_KZT
    except Exception:
        # –µ—Å–ª–∏ –∞–ø–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ‚Äî –ø–∞–¥–∞–µ–º –Ω–∞ –∫–µ—à, –∏–Ω–∞—á–µ –¥–µ—Ñ–æ–ª—Ç
        if "rate" in cache:
            return float(cache["rate"]) + FX_BUMP_KZT
        return 500.0

def ceil_to_1000_kzt(v: float) -> int:
    return int(math.ceil(v / 1000.0) * 1000.0)

# ===================== –£–¢–ò–õ–ò–¢–´ =====================
account_statuses = {}

def is_account_active(account_id):
    try:
        status = AdAccount(account_id).api_get(fields=['account_status'])['account_status']
        return "üü¢" if status == 1 else "üî¥"
    except:
        # –Ω–µ—Ç –ø—Ä–∞–≤/–æ—à–∏–±–∫–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ ¬´–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞¬ª, –≤ –æ—Ç—á—ë—Ç –Ω–µ —à–ª—ë–º
        return None

def format_number(num):
    return f"{int(float(num)):,}".replace(",", " ")

# ===================== –û–°–ù–û–í–ù–û–ô –û–¢–ß–Å–¢ =====================
def get_facebook_data(account_id, date_preset, date_label=''):
    account = AdAccount(account_id)
    fields = ['impressions', 'cpm', 'clicks', 'cpc', 'spend', 'actions']
    params = {'time_range': date_preset, 'level': 'account'} if isinstance(date_preset, dict) else {'date_preset': date_preset, 'level': 'account'}

    try:
        insights = account.get_insights(fields=fields, params=params)
        acc_info = account.api_get(fields=['name', 'account_status'])
        account_name = acc_info.get('name', ACCOUNT_NAMES.get(account_id, account_id))
        # –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–æ–≤—Å–µ
        if acc_info.get('account_status') is None:
            return None
    except Exception:
        return None  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (403/–Ω–µ—Ç –ø—Ä–∞–≤/–∏ —Ç.–ø.)

    date_info = f" ({date_label})" if date_label else ""
    status_emoji = "üü¢" if acc_info.get('account_status') == 1 else "üî¥"
    report = f"{status_emoji} <b>{account_name}</b>{date_info}\n"

    if not insights:
        return report + "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    insight = insights[0]
    report += (
        f"üëÅ –ü–æ–∫–∞–∑—ã: {format_number(insight.get('impressions', '0'))}\n"
        f"üéØ CPM: {round(float(insight.get('cpm', 0)), 2)} $\n"
        f"üñ± –ö–ª–∏–∫–∏: {format_number(insight.get('clicks', '0'))}\n"
        f"üí∏ CPC: {round(float(insight.get('cpc', 0)), 2)} $\n"
        f"üíµ –ó–∞—Ç—Ä–∞—Ç—ã: {round(float(insight.get('spend', 0)), 2)} $"
    )

    actions = {a['action_type']: float(a['value']) for a in insight.get('actions', [])}

    # –ü–µ—Ä–µ–ø–∏—Å–∫–∏
    if account_id in MESSAGING_ACCOUNTS:
        conv = actions.get('onsite_conversion.messaging_conversation_started_7d', 0)
        report += f"\n‚úâÔ∏è –ù–∞—á–∞—Ç–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞: {int(conv)}"
        if conv > 0:
            report += f"\nüí¨üí≤ –¶–µ–Ω–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏: {round(float(insight.get('spend', 0)) / conv, 2)} $"

    # –õ–∏–¥—ã —Å —Å–∞–π—Ç–∞
    if account_id in LEAD_WEBSITE_ACCOUNTS:
        leads = (
            actions.get('offsite_conversion.fb_pixel_submit_application', 0) or
            actions.get('offsite_conversion.fb_pixel_lead', 0) or
            actions.get('lead', 0)
        )
        report += f"\nüì© –ó–∞—è–≤–∫–∏: {int(leads)}"
        if leads > 0:
            report += f"\nüì©üí≤ –¶–µ–Ω–∞ –∑–∞—è–≤–∫–∏: {round(float(insight.get('spend', 0)) / leads, 2)} $"

    return report

async def send_report(context, chat_id, period, date_label=''):
    for acc in AD_ACCOUNTS:
        msg = get_facebook_data(acc, period, date_label)
        if msg:
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='HTML')

# ===================== –ë–ò–õ–õ–ò–ù–ì–ò (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ, –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏) =====================
def fmt_int_spaces(n: int) -> str:
    return f"{n:,}".replace(",", " ")

def fmt_usd(usd: float) -> str:
    return f"{usd:.2f}"

async def _gather_inactive_billings():
    rate = get_usd_to_kzt()
    results = []
    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id)
            info = acc.api_get(fields=['name', 'account_status', 'balance'])
            status = info.get('account_status')
            if status == 1:
                continue  # –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            name_api = info.get('name', ACCOUNT_NAMES.get(acc_id, acc_id))
            usd = float(info.get('balance', 0)) / 100.0
            kzt = ceil_to_1000_kzt(usd * rate)
            results.append((name_api, usd, kzt))
        except Exception:
            # –Ω–µ—Ç –ø—Ä–∞–≤/–æ—à–∏–±–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            continue
    return results

async def send_billing_messages(context, chat_id):
    items = await _gather_inactive_billings()
    if not items:
        await context.bot.send_message(chat_id=chat_id, text="‚úÖ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ —Å –±–∏–ª–ª–∏–Ω–≥–∞–º–∏ —Å–µ–π—á–∞—Å –Ω–µ—Ç.", parse_mode='HTML')
        return
    for name_api, usd, kzt in items:
        text = (
            f"üî¥ <b>{name_api}</b>\n"
            f"   üíµ {fmt_usd(usd)} $  |  üá∞üáø {fmt_int_spaces(kzt)} ‚Ç∏"
        )
        await context.bot.send_message(chat_id=chat_id, text=text, parse_mode='HTML')

# ===================== –ü–†–û–ì–ù–û–ó –ë–ò–õ–õ–ò–ù–ì–ê (–æ—Å—Ç–∞–≤–∏–ª–∏ –∫–∞–∫ –µ—Å—Ç—å, —Å –∏–≥–Ω–æ—Ä–æ–º –æ—à–∏–±–æ–∫) =====================
FORECAST_CACHE_FILE = "forecast_cache.json"
ACCOUNT_NAMES_FALLBACK = ACCOUNT_NAMES  # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–∞–ø—É

async def check_billing_forecast(context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now(ALMATY_TZ).date()
    try:
        with open(FORECAST_CACHE_FILE, "r") as f:
            cache = json.load(f)
    except:
        cache = {}

    for acc_id in AD_ACCOUNTS:
        try:
            acc = AdAccount(acc_id)
            info = acc.api_get(fields=["name", "spend_cap", "amount_spent", "account_status"])
            if info.get("account_status") is None:
                continue
            spend_cap = float(info.get("spend_cap", 0)) / 100
            spent = float(info.get("amount_spent", 0)) / 100
            available = spend_cap - spent
            daily_budget = sum(
                int(c.get("daily_budget", 0)) / 100
                for c in acc.get_campaigns(fields=["name", "effective_status", "daily_budget"])
                if c.get("effective_status") == "ACTIVE"
            )
            if daily_budget <= 0:
                continue
            days_left = ceil(available / daily_budget)
            billing_date = today + timedelta(days=days_left)
            if (billing_date - today).days == 3:
                if cache.get(acc_id) == billing_date.isoformat():
                    continue
                name = ACCOUNT_NAMES_FALLBACK.get(acc_id, info.get("name", acc_id))
                msg = (
                    f"‚ö†Ô∏è <b>{name}</b>\n\n"
                    f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: <b>{spend_cap:.2f} $</b>\n"
                    f"–î–∞—Ç–∞: <b>{billing_date.strftime('%d.%m.%Y')}</b>\n"
                    f"–î–æ –ø–æ—Ä–æ–≥–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b>{available:.2f} $</b>\n"
                    f"–°—É–º–º–∞—Ä–Ω—ã–π –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç: <b>{daily_budget:.2f} $</b>\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: <b>{days_left}</b>"
                )
                await context.bot.send_message(chat_id=CHAT_ID, text=msg, parse_mode='HTML')
                cache[acc_id] = billing_date.isoformat()
        except Exception:
            continue

    with open(FORECAST_CACHE_FILE, "w") as f:
        json.dump(cache, f)

# ===================== –ë–ò–õ–õ–ò–ù–ì-–ú–û–ù–¢–û–† (–∞–ø—Ç–∞–π–º) =====================
async def check_billing(context: ContextTypes.DEFAULT_TYPE):
    global account_statuses
    for account_id in AD_ACCOUNTS:
        try:
            account = AdAccount(account_id)
            info = account.api_get(fields=['name', 'account_status', 'balance'])
            status = info.get('account_status')
            # –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω (1), –∞ —Ç–µ–ø–µ—Ä—å –Ω–µ 1 ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º
            if account_id in account_statuses and account_statuses[account_id] == 1 and status != 1:
                name = info.get('name', ACCOUNT_NAMES.get(account_id, account_id))
                balance = float(info.get('balance', 0)) / 100
                await context.bot.send_message(
                    chat_id=CHAT_ID,
                    text=f"‚ö†Ô∏è ‚ö†Ô∏è ‚ö†Ô∏è –ê—Ö—Ç—É–Ω–≥! {name}! —É –Ω–∞—Å –±–∏–ª–ª–∏–Ω–≥ - {balance:.2f} $",
                    parse_mode='HTML'
                )
            account_statuses[account_id] = status
        except Exception:
            # –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –º–æ–ª—á–∏–º
            continue

# ===================== –ö–ù–û–ü–ö–ò –ò –ö–û–ú–ê–ù–î–´ =====================
def make_main_keyboard_for_groups():
    return InlineKeyboardMarkup([[
        InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="today"),
        InlineKeyboardButton("–í—á–µ—Ä–∞", callback_data="yesterday"),
        InlineKeyboardButton("–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è", callback_data="lastweek"),
    ], [
        InlineKeyboardButton("–ë–∏–ª–ª–∏–Ω–≥–∏", callback_data="billing")
    ]])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = make_main_keyboard_for_groups()
    await update.message.reply_text("ü§ñ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á—ë—Ç:", reply_markup=kb)

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    chat_id = query.message.chat_id

    if data == "today":
        label = datetime.now().strftime('%d.%m.%Y')
        await send_report(context, chat_id, 'today', label)
    elif data == "yesterday":
        label = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
        await send_report(context, chat_id, 'yesterday', label)
    elif data == "lastweek":
        until = datetime.now() - timedelta(days=1)
        since = until - timedelta(days=6)
        period = {'since': since.strftime('%Y-%m-%d'), 'until': until.strftime('%Y-%m-%d')}
        label = f"{since.strftime('%d.%m')}-{until.strftime('%d.%m')}"
        await send_report(context, chat_id, period, label)
    elif data == "billing":
        await send_billing_messages(context, chat_id)

async def cmd_billing(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_billing_messages(context, update.effective_chat.id)

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫–∏\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/billing ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –±–∏–ª–ª–∏–Ω–≥–∏ (–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã)\n\n"
        "–ö–Ω–æ–ø–∫–∏:\n"
        "‚Ä¢ –°–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ –í—á–µ—Ä–∞\n"
        "‚Ä¢ –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è\n"
        "‚Ä¢ –ë–∏–ª–ª–∏–Ω–≥–∏\n"
    )
    await update.message.reply_text(text)

# –û—Å—Ç–∞–≤–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–¥–ª—è –ª–∏—á–∫–∏)
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    text = update.message.text.strip().lower()
    if text in ('—Å–µ–≥–æ–¥–Ω—è', 'today'):
        label = datetime.now().strftime('%d.%–º.%Y'.replace('–º', 'm'))  # —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        label = datetime.now().strftime('%d.%m.%Y')
        await send_report(context, update.message.chat_id, 'today', label)
    elif text in ('–≤—á–µ—Ä–∞', 'yesterday'):
        label = (datetime.now() - timedelta(days=1)).strftime('%d.%m.%Y')
        await send_report(context, update.message.chat_id, 'yesterday', label)
    elif text in ('–ø—Ä–æ—à–µ–¥—à–∞—è –Ω–µ–¥–µ–ª—è', 'last week', 'lastweek', '–ø—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è'):
        until = datetime.now() - timedelta(days=1)
        since = until - timedelta(days=6)
        period = {'since': since.strftime('%Y-%m-%d'), 'until': until.strftime('%Y-%m-%d')}
        label = f"{since.strftime('%d.%m')}-{until.strftime('%d.%m')}"
        await send_report(context, update.message.chat_id, period, label)
    elif text in ('–±–∏–ª–ª–∏–Ω–≥–∏', 'billing'):
        await send_billing_messages(context, update.message.chat_id)

# ===================== –î–ñ–û–ë–´ =====================
async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    label = (datetime.now(ALMATY_TZ) - timedelta(days=1)).strftime('%d.%m.%Y')
    await send_report(context, CHAT_ID, 'yesterday', label)
    await send_billing_messages(context, CHAT_ID)

# ===================== APP =====================
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –•–µ–Ω–¥–ª–µ—Ä—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("billing", cmd_billing))
    app.add_handler(CallbackQueryHandler(on_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

    # –î–∂–æ–±—ã
    app.job_queue.run_repeating(check_billing, interval=600, first=10)
    app.job_queue.run_daily(daily_report, time=dtime(hour=9, minute=30, tzinfo=ALMATY_TZ))
    app.job_queue.run_daily(check_billing_forecast, time=dtime(hour=9, minute=0, tzinfo=ALMATY_TZ))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥.")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
